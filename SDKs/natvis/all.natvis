<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
  <!-- /Users/saeruhikari/Documents/GitHub/Sakura.Runtime/SDKs/natvis/D3D12MemAlloc.natvis -->
  <Type Name="D3D12MA::Vector&lt;*&gt;">
    <DisplayString>{{ Count={m_Count} }}</DisplayString>
    <Expand>
      <Item Name="[Count]">m_Count</Item>
      <Item Name="[Capacity]">m_Capacity</Item>
      <ArrayItems>
        <Size>m_Count</Size>
        <ValuePointer>m_pArray</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="D3D12MA::List&lt;*&gt;">
    <DisplayString>{{ Count={m_Count} }}</DisplayString>
    <Expand>
      <Item Name="[Count]">m_Count</Item>
      <LinkedListItems>
        <Size>m_Count</Size>
        <HeadPointer>m_pFront</HeadPointer>
        <NextPointer>pNext</NextPointer>
        <ValueNode>Value</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>
  
  <!--
    Due to custom way of accesing next items in
    D3D12MA::IntrusiveLinkedList via methods in provided type traits,
    every specialization must be manually added with
    custom <NextPointer> field describing proper way of iterating the list.
  -->
  <Type Name="D3D12MA::IntrusiveLinkedList&lt;D3D12MA::CommittedAllocationListItemTraits&gt;">
    <DisplayString>{{ Count={m_Count} }}</DisplayString>
    <Expand>
      <Item Name="[Count]">m_Count</Item>
      <LinkedListItems>
        <Size>m_Count</Size>
        <HeadPointer>m_Front</HeadPointer>
        <NextPointer>m_Committed.next</NextPointer>
        <ValueNode>*this</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>
  <Type Name="D3D12MA::IntrusiveLinkedList&lt;D3D12MA::PoolListItemTraits&gt;">
    <DisplayString>{{ Count={m_Count} }}</DisplayString>
    <Expand>
      <Item Name="[Count]">m_Count</Item>
      <LinkedListItems>
        <Size>m_Count</Size>
        <HeadPointer>m_Front</HeadPointer>
        <NextPointer>m_NextPool</NextPointer>
        <ValueNode>*this</ValueNode>
      </LinkedListItems>
    </Expand>
  </Type>
  <!-- /Users/saeruhikari/Documents/GitHub/Sakura.Runtime/SDKs/natvis/EASTL.natvis -->

<Type Name="eastl::unique_ptr&lt;*&gt;">
	<DisplayString Condition="mPair.mFirst != nullptr">({(void*)mPair.mFirst} = {*mPair.mFirst})</DisplayString>
	<DisplayString Condition="mPair.mFirst == nullptr">({nullptr})</DisplayString>
	<Expand>
		<Item Name="[pointer]">(void*)mPair.mFirst</Item>
		<Item Name="[value]">*mPair.mFirst</Item>
	</Expand>
</Type>

<Type Name="eastl::shared_ptr&lt;*&gt;">
	<DisplayString Condition="mpValue != nullptr">({(void*)mpValue} = {*mpValue})</DisplayString>
	<DisplayString Condition="mpValue == nullptr">({nullptr})</DisplayString>
	<Expand>
		<Item Name="[pointer]">(void*)mpValue</Item>
		<Item Name="[value]">*mpValue</Item>
		<Item Name="[reference count]">mpRefCount-&gt;mRefCount</Item>
		<Item Name="[weak reference count]">mpRefCount-&gt;mWeakRefCount</Item>
	</Expand>
</Type>

<Type Name="eastl::weak_ptr&lt;*&gt;">
	<DisplayString>{((mpRefCount &amp;&amp; mpRefCount-&gt;mRefCount) ? mpValue : nullptr)}</DisplayString>
	<Expand>
		<ExpandedItem>mpRefCount &amp;&amp; mpRefCount-&gt;mRefCount ? mpValue : nullptr</ExpandedItem>
	</Expand>
</Type>

<Type Name="eastl::array&lt;*,*&gt;">
	<DisplayString Condition="$T2 == 0">[{$T2}] {{}}</DisplayString>
	<DisplayString Condition="$T2 == 1">[{$T2}] {{ {*mValue} }}</DisplayString>
	<DisplayString Condition="$T2 == 2">[{$T2}] {{ {*mValue}, {*(mValue+1)} }}</DisplayString>
	<DisplayString Condition="$T2 == 3">[{$T2}] {{ {*mValue}, {*(mValue+1)}, {*(mValue+2)} }}</DisplayString>
	<DisplayString Condition="$T2 == 4">[{$T2}] {{ {*mValue}, {*(mValue+1)}, {*(mValue+2)}, {*(mValue+3)} }}</DisplayString>
	<DisplayString Condition="$T2 == 5">[{$T2}] {{ {*mValue}, {*(mValue+1)}, {*(mValue+2)}, {*(mValue+3)}, {*(mValue+4)} }}</DisplayString>
	<DisplayString Condition="$T2 == 6">[{$T2}] {{ {*mValue}, {*(mValue+1)}, {*(mValue+2)}, {*(mValue+3)}, {*(mValue+4)}, {*(mValue+5)} }}</DisplayString>
	<DisplayString Condition="$T2 &gt; 6">[{$T2}] {{ {*mValue}, {*(mValue+1)}, {*(mValue+2)}, {*(mValue+3)}, {*(mValue+4)}, {*(mValue+5)}, ... }}</DisplayString>
	<Expand>
        <Item Name="[size]">$T2</Item>
        <ArrayItems>
            <Size>$T2</Size>
            <ValuePointer>mValue</ValuePointer>
        </ArrayItems>
    </Expand>
</Type>

<Type Name="eastl::basic_string&lt;*&gt;">
	<DisplayString Condition="!!(mPair.mFirst.sso.mRemainingSizeField.mnRemainingSize &amp; kSSOMask)">"{mPair.mFirst.heap.mpBegin,sb}"</DisplayString>
	<DisplayString Condition="!(mPair.mFirst.sso.mRemainingSizeField.mnRemainingSize &amp; kSSOMask)">"{mPair.mFirst.sso.mData,sb}"</DisplayString>
	<Expand>
		<Item Name="[length]" Condition="!!(mPair.mFirst.sso.mRemainingSizeField.mnRemainingSize &amp; kSSOMask)">mPair.mFirst.heap.mnSize</Item>
		<Item Name="[capacity]" Condition="!!(mPair.mFirst.sso.mRemainingSizeField.mnRemainingSize &amp; kSSOMask)">(mPair.mFirst.heap.mnCapacity &amp; ~kHeapMask)</Item>
		<Item Name="[value]" Condition="!!(mPair.mFirst.sso.mRemainingSizeField.mnRemainingSize &amp; kSSOMask)">mPair.mFirst.heap.mpBegin,sb</Item>

		<Item Name="[length]" Condition="!(mPair.mFirst.sso.mRemainingSizeField.mnRemainingSize &amp; kSSOMask)">mPair.mFirst.sso.mRemainingSizeField.mnRemainingSize</Item>
		<Item Name="[capacity]" Condition="!(mPair.mFirst.sso.mRemainingSizeField.mnRemainingSize &amp; kSSOMask)">SSOLayout::SSO_CAPACITY</Item>
		<Item Name="[value]" Condition="!(mPair.mFirst.sso.mRemainingSizeField.mnRemainingSize &amp; kSSOMask)">mPair.mFirst.sso.mData,sb</Item>

		<Item Name="[uses heap]">!!(mPair.mFirst.sso.mRemainingSizeField.mnRemainingSize &amp; kSSOMask)</Item>
	</Expand>
</Type>

<Type Name="eastl::pair&lt;*&gt;">
	<DisplayString>({first}, {second})</DisplayString>
    <Expand>
        <Item Name="first">first</Item>
        <Item Name="second">second</Item>
    </Expand>
</Type>

<Type Name="eastl::VectorBase&lt;*&gt;">
	<DisplayString Condition="mpEnd == mpBegin">[{mpEnd - mpBegin}] {{}}</DisplayString>
	<DisplayString Condition="mpEnd - mpBegin == 1">[{mpEnd - mpBegin}] {{ {*mpBegin} }}</DisplayString>
	<DisplayString Condition="mpEnd - mpBegin == 2">[{mpEnd - mpBegin}] {{ {*mpBegin}, {*(mpBegin+1)} }}</DisplayString>
	<DisplayString Condition="mpEnd - mpBegin == 3">[{mpEnd - mpBegin}] {{ {*mpBegin}, {*(mpBegin+1)}, {*(mpBegin+2)} }}</DisplayString>
	<DisplayString Condition="mpEnd - mpBegin == 4">[{mpEnd - mpBegin}] {{ {*mpBegin}, {*(mpBegin+1)}, {*(mpBegin+2)}, {*(mpBegin+3)} }}</DisplayString>
	<DisplayString Condition="mpEnd - mpBegin == 5">[{mpEnd - mpBegin}] {{ {*mpBegin}, {*(mpBegin+1)}, {*(mpBegin+2)}, {*(mpBegin+3)}, {*(mpBegin+4)} }}</DisplayString>
	<DisplayString Condition="mpEnd - mpBegin == 6">[{mpEnd - mpBegin}] {{ {*mpBegin}, {*(mpBegin+1)}, {*(mpBegin+2)}, {*(mpBegin+3)}, {*(mpBegin+4)}, {*(mpBegin+5)} }}</DisplayString>
	<DisplayString Condition="mpEnd - mpBegin &gt; 6">[{mpEnd - mpBegin}] {{ {*mpBegin}, {*(mpBegin+1)}, {*(mpBegin+2)}, {*(mpBegin+3)}, {*(mpBegin+4)}, {*(mpBegin+5)}, ... }}</DisplayString>
    <Expand>
        <Item Name="[size]">mpEnd - mpBegin</Item>
        <Item Name="[capacity]">mCapacityAllocator.mFirst - mpBegin</Item>
        <ArrayItems>
            <Size>mpEnd - mpBegin</Size>
            <ValuePointer>mpBegin</ValuePointer>
        </ArrayItems>
    </Expand>
</Type>

<Type Name="eastl::DequeBase&lt;*,*,*&gt;">
	<DisplayString Condition="mItBegin.mpCurrent == mItEnd.mpCurrent">
		[0] {{}}
	</DisplayString>
	<DisplayString Condition="(mItEnd.mpCurrentArrayPtr - mItBegin.mpCurrentArrayPtr) * $T3 + (mItEnd.mpCurrent-mItEnd.mpBegin) - (mItBegin.mpCurrent-mItBegin.mpBegin) == 1">
		[1] {{ {*mItBegin.mpCurrent} }}
	</DisplayString>
	<DisplayString Condition="(mItEnd.mpCurrentArrayPtr - mItBegin.mpCurrentArrayPtr) * $T3 + (mItEnd.mpCurrent-mItEnd.mpBegin) - (mItBegin.mpCurrent-mItBegin.mpBegin) != 0">
		[{(mItEnd.mpCurrentArrayPtr - mItBegin.mpCurrentArrayPtr) * $T3 + (mItEnd.mpCurrent-mItEnd.mpBegin) - (mItBegin.mpCurrent-mItBegin.mpBegin)}] 
		{{ 
			{*mItBegin.mpCurrent}, 
			... 
		}}
	</DisplayString>
	<Expand>
		<Item Name="[size]">(mItEnd.mpCurrentArrayPtr - mItBegin.mpCurrentArrayPtr) * $T3 + (mItEnd.mpCurrent-mItEnd.mpBegin) - (mItBegin.mpCurrent-mItBegin.mpBegin)</Item>
		<IndexListItems>
            <Size>(mItEnd.mpCurrentArrayPtr - mItBegin.mpCurrentArrayPtr) * $T3 + (mItEnd.mpCurrent-mItEnd.mpBegin) - (mItBegin.mpCurrent-mItBegin.mpBegin)</Size>
            <ValueNode>mItBegin.mpCurrentArrayPtr[(mItBegin.mpCurrent-mItBegin.mpBegin + $i) / $T3][(mItBegin.mpCurrent-mItBegin.mpBegin + $i) % $T3]</ValueNode>
        </IndexListItems>
	</Expand>
</Type>

<Type Name="eastl::DequeIterator&lt;*&gt;">
	<DisplayString>{*mpCurrent}</DisplayString>
	<Expand>
		<Item Name="Value">*mpCurrent</Item>
		<Item Name="Previous" Condition="mpCurrent == mpBegin">*(*(mpCurrentArrayPtr-1) + (mpEnd-mpBegin) - 1)</Item>
		<Item Name="Previous" Condition="mpCurrent != mpBegin">*(mpCurrent-1)</Item>
		<Item Name="Next" Condition="mpCurrent+1 == mpEnd">**(mpCurrentArrayPtr+1)</Item>
		<Item Name="Next" Condition="mpCurrent+1 != mpEnd">*(mpCurrent+1)</Item>
		<Item Name="Begin">mpCurrent == mpBegin</Item>
		<Item Name="End">mpCurrent+1 == mpEnd</Item>
	</Expand>
</Type>

<Type Name="eastl::queue&lt;*&gt;">
	<AlternativeType Name="eastl::priority_queue&lt;*&gt;"/>
	<AlternativeType Name="eastl::stack&lt;*&gt;"/>
	<DisplayString>{c}</DisplayString>
	<Expand>
		<ExpandedItem>c</ExpandedItem>
	</Expand>
</Type>

<Type Name="eastl::ListBase&lt;*&gt;">
	<DisplayString Condition="mNode.mpNext == &amp;mNode">
		[0] {{}}
	</DisplayString>
    <DisplayString Condition="mNode.mpNext != &amp;mNode &amp;&amp; mNode.mpNext-&gt;mpNext == &amp;mNode">
		[1] {{ {((eastl::ListNode&lt;$T1&gt;*)mNode.mpNext)-&gt;mValue} }}
	</DisplayString>
	<DisplayString Condition="mNode.mpNext != &amp;mNode &amp;&amp; mNode.mpNext-&gt;mpNext != &amp;mNode &amp;&amp; mNode.mpNext-&gt;mpNext-&gt;mpNext == &amp;mNode">
		[2] 
		{{ 
			{((eastl::ListNode&lt;$T1&gt;*)mNode.mpNext)-&gt;mValue}, 
			{((eastl::ListNode&lt;$T1&gt;*)mNode.mpNext-&gt;mpNext)-&gt;mValue} 
		}}
	</DisplayString>
	<DisplayString Condition="mNode.mpNext != &amp;mNode &amp;&amp; mNode.mpNext-&gt;mpNext != &amp;mNode &amp;&amp; mNode.mpNext-&gt;mpNext-&gt;mpNext != &amp;mNode">
		[?] 
		{{ 
			{((eastl::ListNode&lt;$T1&gt;*)mNode.mpNext)-&gt;mValue}, 
			{((eastl::ListNode&lt;$T1&gt;*)mNode.mpNext-&gt;mpNext)-&gt;mValue}, 
			...
		}}
	</DisplayString>
	<Expand>
		<Synthetic Name="NOTE!">
		  <DisplayString>Content of lists will repeat indefinitely. Keep that in mind!</DisplayString> 
		</Synthetic>  
        <LinkedListItems>
            <HeadPointer>mNode.mpNext</HeadPointer>
            <NextPointer>mpNext</NextPointer>
            <ValueNode>((eastl::ListNode&lt;$T1&gt;*)this)-&gt;mValue</ValueNode>
        </LinkedListItems>
    </Expand>
</Type>

<Type Name="eastl::ListNode&lt;*&gt;">
	<DisplayString>{mValue}</DisplayString>
	<Expand>
		<Item Name="Value">mValue</Item>
		<Item Name="Next">*(eastl::ListNode&lt;$T1&gt;*)mpNext</Item>
		<Item Name="Previous">*(eastl::ListNode&lt;$T1&gt;*)mpPrev</Item>
		<Synthetic Name="NOTE!">
		  <DisplayString>Content of lists will repeat indefinitely. Keep that in mind!</DisplayString> 
		</Synthetic>  
		<Synthetic Name="List">
		  <DisplayString>The rest of the list follows:</DisplayString> 
		</Synthetic>
        <LinkedListItems>
            <HeadPointer>(eastl::ListNode&lt;$T1&gt;*)mpNext-&gt;mpNext</HeadPointer>
            <NextPointer>(eastl::ListNode&lt;$T1&gt;*)mpNext</NextPointer>
            <ValueNode>mValue</ValueNode>
        </LinkedListItems>
	</Expand>
</Type>

<Type Name="eastl::ListIterator&lt;*&gt;">
	<DisplayString>{*mpNode}</DisplayString>
	<Expand>
		<ExpandedItem>mpNode</ExpandedItem>
	</Expand>
</Type>

<Type Name="eastl::SListBase&lt;*&gt;">
	<DisplayString Condition="mNode.mpNext == 0">
		[0] {{}}
	</DisplayString>
    <DisplayString Condition="mNode.mpNext != 0 &amp;&amp; mNode.mpNext-&gt;mpNext == 0">
		[1] 
		{{ 
			{((eastl::SListNode&lt;$T1&gt;*)mNode.mpNext)-&gt;mValue} 
		}}
	</DisplayString>
	<DisplayString Condition="mNode.mpNext != 0 &amp;&amp; mNode.mpNext-&gt;mpNext != 0 &amp;&amp; mNode.mpNext-&gt;mpNext-&gt;mpNext == 0">
		[2] 
		{{ 
			{((eastl::SListNode&lt;$T1&gt;*)mNode.mpNext)-&gt;mValue}, 
			{((eastl::SListNode&lt;$T1&gt;*)mNode.mpNext-&gt;mpNext)-&gt;mValue} 
		}}
	</DisplayString>
	<DisplayString Condition="mNode.mpNext != 0 &amp;&amp; mNode.mpNext-&gt;mpNext != 0 &amp;&amp; mNode.mpNext-&gt;mpNext-&gt;mpNext != 0">
		[?] 
		{{ 
			{((eastl::SListNode&lt;$T1&gt;*)mNode.mpNext)-&gt;mValue}, 
			{((eastl::SListNode&lt;$T1&gt;*)mNode.mpNext-&gt;mpNext)-&gt;mValue},
			...
		}}
	</DisplayString>
	<Expand>
        <LinkedListItems>
            <HeadPointer>mNode.mpNext</HeadPointer>
            <NextPointer>mpNext</NextPointer>
            <ValueNode>((eastl::SListNode&lt;$T1&gt;*)this)-&gt;mValue</ValueNode>
        </LinkedListItems>
    </Expand>
</Type>

<Type Name="eastl::SListNode&lt;*&gt;">
	<DisplayString>{mValue}</DisplayString>
	<Expand>
		<Item Name="Value">mValue</Item>
		<Item Name="Next">*(eastl::SListNode&lt;$T1&gt;*)mpNext</Item>
		<Synthetic Name="List">
		  <DisplayString>The rest of the list follows:</DisplayString> 
		</Synthetic>
		<LinkedListItems>
            <HeadPointer>mpNext == nullptr ? nullptr : (eastl::SListNode&lt;$T1&gt;*)mpNext-&gt;mpNext</HeadPointer>
            <NextPointer>(eastl::SListNode&lt;$T1&gt;*)mpNext</NextPointer>
            <ValueNode>mValue</ValueNode>
        </LinkedListItems>
	</Expand>
</Type>

<Type Name="eastl::SListIterator&lt;*&gt;">
	<DisplayString>{*mpNode}</DisplayString>
	<Expand>
		<ExpandedItem>*mpNode</ExpandedItem>
	</Expand>
</Type>

<Type Name="eastl::intrusive_list_base">
	<DisplayString Condition="mAnchor.mpNext == &amp;mAnchor">[0] {{}}</DisplayString>
    <DisplayString Condition="mAnchor.mpNext != &amp;mAnchor &amp;&amp; mAnchor.mpNext-&gt;mpNext == &amp;mAnchor">[1] {{ {mAnchor.mpNext} }}</DisplayString>
	<DisplayString Condition="mAnchor.mpNext != &amp;mAnchor &amp;&amp; mAnchor.mpNext-&gt;mpNext != &amp;mAnchor">[?] {{ {mAnchor.mpNext}, ... }}</DisplayString>
	<Expand>
		<Synthetic Name="NOTE!">
		  <DisplayString>Content of intrusive lists will repeat indefinitely. Keep that in mind!</DisplayString> 
		</Synthetic>  
        <LinkedListItems>
            <HeadPointer>mAnchor.mpNext</HeadPointer>
            <NextPointer>mpNext</NextPointer>
            <ValueNode>*this</ValueNode>
        </LinkedListItems>
    </Expand>
</Type>

<Type Name="eastl::intrusive_list_iterator&lt;*&gt;">
	<DisplayString>{*mpNode}</DisplayString>
	<Expand>
		<ExpandedItem>*mpNode</ExpandedItem>
	</Expand>
</Type>

<Type Name="eastl::set&lt;*&gt;">
	<AlternativeType Name="eastl::multiset&lt;*&gt;"/>
    <DisplayString Condition="mnSize == 0">
		[0] {{}}
	</DisplayString>
	<DisplayString Condition="mnSize == 1">
		[1] 
		{{ 
			{((eastl::rbtree_node&lt;$T1&gt;*)mAnchor.mpNodeLeft)-&gt;mValue} 
		}}
	</DisplayString>
	<DisplayString Condition="mnSize &gt; 1">
		[{mnSize}] 
		{{ 
			{((eastl::rbtree_node&lt;$T1&gt;*)mAnchor.mpNodeLeft)-&gt;mValue}, 
			...
		}}
	</DisplayString>
    <Expand>
		<Item Name="[size]">mnSize</Item>
        <TreeItems>
            <Size>mnSize</Size>
            <HeadPointer>mAnchor.mpNodeParent</HeadPointer>
            <LeftPointer>mpNodeLeft</LeftPointer>
            <RightPointer>mpNodeRight</RightPointer>
            <ValueNode>((eastl::rbtree_node&lt;$T1&gt;*)this)-&gt;mValue</ValueNode>
        </TreeItems>
    </Expand>
</Type>

<Type Name="eastl::rbtree&lt;*,*&gt;">
	<DisplayString Condition="mnSize == 0">
		[0] {{}}
	</DisplayString>
	<DisplayString Condition="mnSize == 1">
		[1] 
		{{ 
			{((eastl::rbtree_node&lt;$T2&gt;*)mAnchor.mpNodeLeft)-&gt;mValue} 
		}}
	</DisplayString>
	<DisplayString Condition="mnSize &gt; 1">
		[{mnSize}] 
		{{ 
			{((eastl::rbtree_node&lt;$T2&gt;*)mAnchor.mpNodeLeft)-&gt;mValue}, 
			...
		}}
	</DisplayString>
    <Expand>
		<Item Name="[size]">mnSize</Item>
        <TreeItems>
            <Size>mnSize</Size>
            <HeadPointer>mAnchor.mpNodeParent</HeadPointer>
            <LeftPointer>mpNodeLeft</LeftPointer>
            <RightPointer>mpNodeRight</RightPointer>
            <ValueNode>((eastl::rbtree_node&lt;$T2&gt;*)this)-&gt;mValue</ValueNode>
        </TreeItems>
    </Expand>
</Type>

<Type Name="eastl::rbtree_node&lt;*&gt;">
	<DisplayString>{mValue}</DisplayString>
	<Expand>
		<Item Name="Value">mValue</Item>
		<Synthetic Name="NOTE!">
		  <DisplayString>It is possible to expand parents that do not exist.</DisplayString> 
		</Synthetic>
		<Item Name="Parent">*(eastl::rbtree_node&lt;$T2&gt;*)(mpNodeParent.value &amp; (~uintptr_t(1)))</Item>
		<Item Name="Left">*(eastl::rbtree_node&lt;$T2&gt;*)mpNodeLeft</Item>
		<Item Name="Right">*(eastl::rbtree_node&lt;$T2&gt;*)mpNodeRight</Item>
	</Expand>
</Type>

<Type Name="eastl::rbtree_iterator&lt;*&gt;">
	<DisplayString>{*mpNode}</DisplayString>
	<Expand>
		<ExpandedItem>mpNode</ExpandedItem>
	</Expand>
</Type>


<Type Name="eastl::hashtable&lt;*&gt;">
    <DisplayString Condition="mnElementCount == 0">[{mnElementCount}] {{}}</DisplayString>
	<DisplayString Condition="mnElementCount != 0">[{mnElementCount}] {{ ... }}</DisplayString>
	<Expand>
		<ArrayItems>
            <Size>mnBucketCount</Size>
            <ValuePointer>mpBucketArray</ValuePointer>
        </ArrayItems>
	</Expand>
</Type>

<Type Name="eastl::hash_node&lt;*&gt;">
	<DisplayString Condition="this != 0 &amp;&amp; mpNext != 0"> {mValue}, {*mpNext}</DisplayString>
	<DisplayString Condition="this != 0 &amp;&amp; mpNext == 0"> {mValue}</DisplayString>
	<DisplayString Condition="this == 0"/>
	<Expand>
		<LinkedListItems>
            <HeadPointer>this</HeadPointer>
            <NextPointer>mpNext</NextPointer>
            <ValueNode>mValue</ValueNode>
        </LinkedListItems>
	</Expand>
</Type>

<Type Name="eastl::hashtable_iterator_base&lt;*&gt;">
	<DisplayString>{mpNode-&gt;mValue}</DisplayString>
	<Expand>
		<ExpandedItem>mpNode-&gt;mValue</ExpandedItem>
	</Expand>
</Type>

<Type Name="eastl::reverse_iterator&lt;*&gt;">
	<DisplayString>{*(mIterator-1)}</DisplayString>
	<Expand>
		<ExpandedItem>mIterator-1</ExpandedItem>
	</Expand>
</Type>

<Type Name="eastl::bitset&lt;*&gt;">
  <DisplayString>{{count = {kSize}}}</DisplayString>
  <Expand>
    <Item Name="[count]">kSize</Item>
    <CustomListItems>
      <Variable Name="iWord" InitialValue="0"/>
      <Variable Name="iBitInWord" InitialValue="0"/>
      <Variable Name="bBitValue" InitialValue="false"/>

      <Size>kSize</Size>

      <Loop>
        <Exec>bBitValue = ((mWord[iWord] &gt;&gt; iBitInWord) % 2) != 0 ? true : false</Exec>
        <Item>bBitValue</Item>
        <Exec>iBitInWord++</Exec>
        <If Condition="iBitInWord == kBitsPerWord">
          <Exec>iWord++</Exec>
          <Exec>iBitInWord = 0</Exec>
        </If>
      </Loop>
    </CustomListItems>
  </Expand>
</Type>

<Type Name="eastl::ring_buffer&lt;*,*,*&gt;">
  <DisplayString>{c}</DisplayString>
  <Expand>
    <ExpandedItem>c</ExpandedItem>
  </Expand>
</Type>

<Type Name="eastl::basic_string_view&lt;*&gt;">
	<DisplayString>{mpBegin,[mnCount]}</DisplayString>
	<StringView>mpBegin,[mnCount]</StringView>
</Type>

<Type Name="eastl::compressed_pair_imp&lt;*&gt;">
	<DisplayString Condition="($T3) == 0" Optional="true">({mFirst}, {mSecond})</DisplayString>
	<DisplayString Condition="($T3) == 1" Optional="true">({mSecond})</DisplayString>
	<DisplayString Condition="($T3) == 2" Optional="true">({mFirst})</DisplayString>
	<DisplayString Condition="($T3) == 3" Optional="true">(empty)</DisplayString>
	<DisplayString Condition="($T3) == 4" Optional="true">(empty)</DisplayString>
	<DisplayString Condition="($T3) == 5" Optional="true">({mFirst}, {mSecond})</DisplayString>
</Type>

<Type Name="eastl::optional&lt;*&gt;">
	<Intrinsic Name="value" Expression="*($T1*)&amp;val"/>
	<DisplayString Condition="!engaged">nullopt</DisplayString>
	<DisplayString Condition="engaged">{value()}</DisplayString>
	<Expand>
		<Item Condition="engaged" Name="value">value()</Item>
	</Expand>
</Type>

<Type Name="eastl::ratio&lt;*&gt;">
	<DisplayString>{$T1} to {$T2}}</DisplayString>
</Type>


<Type Name="eastl::chrono::duration&lt;*,eastl::ratio&lt;1,1000000000&gt; &gt;">
	<DisplayString>{mRep} nanoseconds</DisplayString>
</Type>

<Type Name="eastl::chrono::duration&lt;*,eastl::ratio&lt;1,1000000&gt; &gt;">
	<DisplayString>{mRep} microseconds</DisplayString>
</Type>

<Type Name="eastl::chrono::duration&lt;*,eastl::ratio&lt;1,1000&gt; &gt;">
	<DisplayString>{mRep} milliseconds</DisplayString>
</Type>

<Type Name="eastl::chrono::duration&lt;*,eastl::ratio&lt;1,1&gt; &gt;">
	<DisplayString>{mRep} seconds</DisplayString>
</Type>

<Type Name="eastl::chrono::duration&lt;*,eastl::ratio&lt;60,1&gt; &gt;">
	<DisplayString>{mRep} minutes</DisplayString>
</Type>

<Type Name="eastl::chrono::duration&lt;*,eastl::ratio&lt;3600,1&gt; &gt;">
	<DisplayString>{mRep} hours</DisplayString>
</Type>

<Type Name="eastl::chrono::duration&lt;*,eastl::ratio&lt;*,*&gt; &gt;">
	<DisplayString>{mRep} duration with ratio = [{$T2} : {$T3}] </DisplayString>
</Type>



<Type Name="eastl::function&lt;*&gt;">
	<DisplayString Condition="mInvokeFuncPtr == nullptr">empty</DisplayString>
	<DisplayString>{mInvokeFuncPtr}</DisplayString>
</Type>


<Type Name="eastl::reference_wrapper&lt;*&gt;">
	<DisplayString>{*val}</DisplayString>
</Type>


<!-- TODO eastl::tuple -->

<Type Name="skr::span&lt;*, *&gt;">
	<DisplayString>{{ extent = {storage_.size_} }}</DisplayString>
	<Expand>
		<ArrayItems>
			<Size>storage_.size_</Size>
			<ValuePointer>storage_.data_</ValuePointer>
		</ArrayItems>
	</Expand>
</Type>

  <!-- /Users/saeruhikari/Documents/GitHub/Sakura.Runtime/src/ecs/sugoi.natvis -->
    <Type Name="skr_guid_t">
        <DisplayString>{{{Storage0,nvoXb}-{((uint16_t*)&amp;Storage1)[0],nvoXb}-{((uint16_t*)&amp;Storage1)[1],nvoXb}-{((uint8_t*)&amp;Storage2)[0],nvoXb}{((uint8_t*)&amp;Storage2)[1],nvoXb}-{((uint8_t*)&amp;Storage2)[2],nvoXb}{((uint8_t*)&amp;Storage2)[3],nvoXb}{((uint8_t*)&amp;Storage3)[0],nvoXb}{((uint8_t*)&amp;Storage3)[1],nvoXb}{((uint8_t*)&amp;Storage3)[2],nvoXb}{((uint8_t*)&amp;Storage3)[3],nvoXb}}}</DisplayString>
    </Type>
    <Type Name="sugoi_chunk_view_t">
        <Intrinsic Name="has_value" Expression="count != 0 &amp;&amp; chunk != nullptr"/>
        <DisplayString Condition="!has_value()">Empty</DisplayString>
        <DisplayString>{{ start={start}, end={start+count}, chunk={chunk} }}</DisplayString>
        <Expand>
          <Item Name="type">((SkrRT.dll!sugoi_chunk_t*)chunk)-&gt;group-&gt;type</Item>
          <Item Name="archetype">((SkrRT.dll!sugoi_chunk_t*)chunk)-&gt;type</Item>
          <Item Name="group">((SkrRT.dll!sugoi_chunk_t*)chunk)-&gt;group</Item>
          <Item Name="chunk">(SkrRT.dll!sugoi_chunk_t*)chunk</Item>
          <Item Name="[start]" Condition="has_value()">start</Item>
          <Item Name="[size]" Condition="has_value()">count</Item>
          <IndexListItems Condition="has_value()">
            <Size>count</Size>
            <ValueNode>((SkrRT.dll!sugoi_entity_debug_proxy_t*)((SkrRT.dll!sugoi_chunk_t*)chunk+1))[$i+start]</ValueNode>
          </IndexListItems>
        </Expand>
    </Type>
    <Type Name="sugoi_entity_debug_proxy_t">
        <DisplayString> {{ id={value &amp; 0x00FFFFFF} version={value &gt;&gt; 24} }} </DisplayString>
    </Type>
    <Type Name="sugoi_group_t">
        <DisplayString Condition="((SkrRT.dll!sugoi_group_t*)this)-&gt;isDead"> Dead {{ chunkCount={((SkrRT.dll!sugoi_group_t*)this)-&gt;chunkCount}, entityCount={((SkrRT.dll!sugoi_group_t*)this)-&gt;size} }}</DisplayString>
        <DisplayString Condition="((SkrRT.dll!sugoi_group_t*)this)-&gt;disabled"> Disabled {{ chunkCount={((SkrRT.dll!sugoi_group_t*)this)-&gt;chunkCount}, entityCount={((SkrRT.dll!sugoi_group_t*)this)-&gt;size} }}</DisplayString>
        <DisplayString>{{ chunkCount={((SkrRT.dll!sugoi_group_t*)this)-&gt;chunkCount}, entityCount={((SkrRT.dll!sugoi_group_t*)this)-&gt;size} }}</DisplayString>
        <Expand>
            <Item Name="type">((SkrRT.dll!sugoi_group_t*)this)-&gt;type</Item>
            <Item Name="archetype">((SkrRT.dll!sugoi_group_t*)this)-&gt;archetype</Item>
            <LinkedListItems>
                <Size>((SkrRT.dll!sugoi_group_t*)this)-&gt;chunkCount</Size>
                <HeadPointer>((SkrRT.dll!sugoi_group_t*)this)-&gt;firstChunk</HeadPointer>
                <NextPointer>next</NextPointer>
                <ValueNode>(*(SkrRT.dll!sugoi_chunk_t*)this)</ValueNode>
            </LinkedListItems>
        </Expand>
    </Type>
    <Type Name="sugoi_type_set_t">
        <Intrinsic Name="has_value" Expression="length != 0 &amp;&amp; data != nullptr"/>
        <DisplayString Condition="!has_value()"> Empty </DisplayString>
        <DisplayString>{{ size={length} }}</DisplayString>
        <Expand>
            <ArrayItems Condition="has_value()">
                <Size>length</Size>
                <ValuePointer>(SkrRT.dll!sugoi::type_index_t*)data</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>
    <Type Name="sugoi_entity_set_t">
        <Intrinsic Name="has_value" Expression="length != 0 &amp;&amp; data != nullptr"/>
        <DisplayString Condition="!has_value()"> Empty </DisplayString>
        <DisplayString>{{ size={length} }}</DisplayString>
        <Expand>
            <ArrayItems Condition="has_value()">
                <Size>length</Size>
                <ValuePointer>(SkrRT.dll!sugoi_entity_debug_proxy_t*)data</ValuePointer>
            </ArrayItems>
        </Expand>
    </Type>
    <Type Name="sugoi_query_t">
        <DisplayString Condition="!((SkrRT.dll!sugoi_query_t*)this)-&gt;built"> Unbuilt </DisplayString>
        <DisplayString> {{ params={((SkrRT.dll!sugoi_query_t*)this)-&gt;parameters.length} }} </DisplayString>
        <Expand>
            <Item Name="filter" Condition="((SkrRT.dll!sugoi_query_t*)this)-&gt;built">((SkrRT.dll!sugoi_query_t*)this)-&gt;buildedFilter</Item>
            <Item Name="filter" Condition="!((SkrRT.dll!sugoi_query_t*)this)-&gt;built">((SkrRT.dll!sugoi_query_t*)this)-&gt;filter</Item>
            <Item Name="metaFilter">((SkrRT.dll!sugoi_query_t*)this)-&gt;meta</Item>
            <Item Name="parameters">((SkrRT.dll!sugoi_query_t*)this)-&gt;parameters</Item>
        </Expand>
    </Type>
    <Type Name="sugoi::type_index_t">
        <DisplayString>{{ {SkrRT.dll!g_sugoi_ctx-&gt;typeRegistry.descriptions.mpBegin[id].name,s}, value={value} }}</DisplayString>
        <Expand>
          <ExpandedItem>SkrRT.dll!g_sugoi_ctx-&gt;typeRegistry.descriptions.mpBegin[id]</ExpandedItem>
        </Expand>
    </Type>
</AutoVisualizer>
