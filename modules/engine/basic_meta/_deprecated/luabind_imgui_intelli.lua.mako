--DO NOT EDIT THIS FILE, IT IS AUTO GENERATED BY CODEGEN
<%
def rm_prefix(name):
    if name.startswith("ImGui_"):
        return name[6:]
    elif name.startswith("ImGui"):
        return name[5:]
    return name
def escape(name):
    if name == "repeat":
        return "repeat_"
    if name == "in":
        return "in_"
    return name
def lua_type(t):
    name = t.declaration
    if hasattr(t, "type_details") and t.type_details.flavour == "function_pointer":
        return "callback"
    if name == "bool":
        return "boolean"
    elif name == "int":
        return "integer"
    elif name == "float":
        return "number"
    elif name == "const char*":
        return "string"
    return name
%>

---@class IMGUI
%for enum in meta.enums:
%for element in enum.elements:
---@field public ${rm_prefix(element.name)} integer ${("@" + element.comments.attached) if hasattr(element, "comments") and hasattr(element.comments, "attached") else ""}
%endfor
%endfor
local _imgui = {}

%for function in meta.functions:
<%
comments = ""
if hasattr(function, "comments"):
    if hasattr(function.comments, "preceding"):
        comments += "\n".join(line.replace("//", "---") for line in function.comments.preceding)
    if hasattr(function.comments, "attached"):
        comments += "\n" + function.comments.attached.replace("//", "---")
%>
${comments}
%for arg in function.arguments:
%if not arg.is_varargs:
---@param ${escape(arg.name)} ${lua_type(arg.type)}
%endif
%endfor
%if function.return_type != "void":
---@return ${lua_type(function.return_type)}
%endif
function _imgui.${rm_prefix(function.name)}(${", ".join(escape(arg.name) if not arg.is_varargs else "..." for arg in function.arguments)}) end
%endfor