--DO NOT EDIT THIS FILE, IT IS AUTO GENERATED BY CODEGEN
<%

categories = {}
for enum in generator.filter_types(db.enums):
    finalcat = categories
    if hasattr(enum.attrs.scriptable, "category"):
        category = enum.attrs.scriptable.category
        subcategories = category.split(".")
        for subcategory in subcategories:
            finalcat = finalcat.setdefault(subcategory, {})
    finalcat.setdefault("___ENUMS___", []).append(enum)
for function in generator.filter_types(db.functions):
    finalcat = categories
    if hasattr(function.attrs.scriptable, "category"):
        category = function.attrs.scriptable.category
        subcategories = category.split(".")
        for subcategory in subcategories:
            finalcat = finalcat.setdefault(subcategory, {})
    finalcat.setdefault("___FUNCTIONS___", []).append(function)
%>
## TODO: handle multiple return values
<%def name="bind_function(function, st)">
    ${db.short_name(function.name)}: ${generator.lua_functor(st, function)}
</%def>

<%def name="bind_record(record)">
export type ${db.short_name(record.name)} = {
%for name, field in vars(record.fields).items():
<% if hasattr(field.attrs, "native"): continue %>
    ${name}: ${generator.lua_type(field.type)},
%endfor
%for method in record.methods:
<% if hasattr(method.attrs, "native"): continue %>
${bind_function(method, "self: " + db.short_name(record.name))}
%endfor
}
</%def>

<%def name="bind_enum(enum)">
type _${generator.lua_type(enum.name)} = {
    %for name in vars(enum.values).keys():
    ${name} : integer,
    %endfor
}
</%def>

<%def name="bind_category(category, prefix)">
<% 
    enums = category.get("___ENUMS___", [])
    functions = category.get("___FUNCTIONS___", [])
%>
%for subcatname, subcat in category.items():
%if subcatname != "___ENUMS___" and subcatname != "___FUNCTIONS___":
${subcatname} = {}
${bind_category(subcat, prefix + "_" + subcatname)}
%endif
%endfor
export type ${prefix} = {
%for enum in enums:
    ${db.short_name(enum.name)}: _${generator.lua_type(enum.name)}
%endfor
%for function in functions:
    ${bind_function(function, "")}
%endfor
%for subcatname, subcat in category.items():
%if subcatname != "___ENUMS___" and subcatname != "___FUNCTIONS___":
    ${subcatname}: ${prefix}_${subcatname}
%endif
%endfor
}
</%def>

%for enum in generator.filter_types(db.enums):
${bind_enum(enum)}
%endfor
%for record in generator.filter_types(db.records):
${bind_record(record)}
%endfor
${bind_category(categories, "_" + module)}

declare ${module} : _${module}

