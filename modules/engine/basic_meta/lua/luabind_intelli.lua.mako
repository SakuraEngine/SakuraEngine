--DO NOT EDIT THIS FILE, IT IS AUTO GENERATED BY CODEGEN
<%
def escape(name):
    if name == "repeat":
        return "repeat_"
    if name == "in":
        return "in_"
    return name
def lua_type(name):
    if name == "bool":
        return "boolean"
    elif name == "int":
        return "integer"
    elif name == "float":
        return "number"
    elif name == "const char*":
        return "string"
    return name.replace("const", "").replace("*", "").replace("&", "").strip()
categories = {}
for enum in generator.filter_types(db.enums):
    finalcat = categories
    if hasattr(enum.attrs.scriptable, "category"):
        category = enum.attrs.scriptable.category
        subcategories = category.split(".")
        for subcategory in subcategories:
            finalcat = finalcat.setdefault(subcategory, {})
    finalcat.setdefault("___ENUMS___", []).append(enum)
for function in generator.filter_types(db.functions):
    finalcat = categories
    if hasattr(function.attrs.scriptable, "category"):
        category = function.attrs.scriptable.category
        subcategories = category.split(".")
        for subcategory in subcategories:
            finalcat = finalcat.setdefault(subcategory, {})
    finalcat.setdefault("___FUNCTIONS___", []).append(function)
%>
<%def name="bind_function(function, prefix)">
%for name, param in vars(function.parameters).items():
---@param ${escape(name)} ${lua_type(param.type)}
%endfor
%if function.retType != "void":
---@return ${lua_type(function.retType)}
%endif
function ${prefix}${db.short_name(function.name)}(${", ".join([param for param in vars(function.parameters).keys()])}) end
</%def>

<%def name="bind_record(record, prefix)">
---@class ${db.short_name(record.name)}
%for name, field in vars(record.fields).items():
%if not hasattr(field.attrs, "native"):
---@field ${name} ${lua_type(field.type)}
%endif
%endfor
_${record.name} = {}
%for method in record.methods:
<% if hasattr(method.attrs, "native"): continue %>
${bind_function(method, "_%s:"%record.name)}
%endfor
</%def>

<%def name="bind_category(category, prefix)">
<% 
    enums = category.get("___ENUMS___", [])
    functions = category.get("___FUNCTIONS___", [])
%>
%for enum in enums:
---@class ${enum.short_name}
%for name in vars(enum.values).keys():
---@field ${name} integer
%endfor
_${enum.name} = {}

---@type ${enum.short_name}
${prefix}${enum.name} = {}
%endfor
%for function in functions:
${bind_function(function, prefix)}
%endfor
%for subcatname, subcat in category.items():
%if subcatname != "___ENUMS___" and subcatname != "___FUNCTIONS___":
${subcatname} = {}
${bind_category(subcat, prefix + "%s."%subcatname)}
%endif
%endfor
</%def>

%for record in generator.filter_types(db.records):
${bind_record(record, "")}
%endfor
${module} = {}
${bind_category(categories, "%s."%module)}

