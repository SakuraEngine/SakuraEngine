// DO NOT EDIT THIS FILE, IT IS AUTO GENERATED BY CODEGEN
#include "SkrImGui/skr_imgui.config.h"
#include "cimgui/cimgui.h"
#include "SkrRT/misc/log.h"
extern "C"
{
    #include "lua.h"
    #include "lualib.h"
}
#include <float.h> // FLT_MIN, FLT_MAX

SKR_IMGUI_EXTERN_C SKR_IMGUI_API void skr_lua_bind_imgui(lua_State* L)
{
    lua_getglobal(L, "skr");
    lua_newtable(L);

    // bind enums
    lua_pushinteger(L, ImGuiWindowFlags_None);
    lua_setfield(L, -2, "WindowFlags_None");
    lua_pushinteger(L, ImGuiWindowFlags_NoTitleBar);
    lua_setfield(L, -2, "WindowFlags_NoTitleBar");
    lua_pushinteger(L, ImGuiWindowFlags_NoResize);
    lua_setfield(L, -2, "WindowFlags_NoResize");
    lua_pushinteger(L, ImGuiWindowFlags_NoMove);
    lua_setfield(L, -2, "WindowFlags_NoMove");
    lua_pushinteger(L, ImGuiWindowFlags_NoScrollbar);
    lua_setfield(L, -2, "WindowFlags_NoScrollbar");
    lua_pushinteger(L, ImGuiWindowFlags_NoScrollWithMouse);
    lua_setfield(L, -2, "WindowFlags_NoScrollWithMouse");
    lua_pushinteger(L, ImGuiWindowFlags_NoCollapse);
    lua_setfield(L, -2, "WindowFlags_NoCollapse");
    lua_pushinteger(L, ImGuiWindowFlags_AlwaysAutoResize);
    lua_setfield(L, -2, "WindowFlags_AlwaysAutoResize");
    lua_pushinteger(L, ImGuiWindowFlags_NoBackground);
    lua_setfield(L, -2, "WindowFlags_NoBackground");
    lua_pushinteger(L, ImGuiWindowFlags_NoSavedSettings);
    lua_setfield(L, -2, "WindowFlags_NoSavedSettings");
    lua_pushinteger(L, ImGuiWindowFlags_NoMouseInputs);
    lua_setfield(L, -2, "WindowFlags_NoMouseInputs");
    lua_pushinteger(L, ImGuiWindowFlags_MenuBar);
    lua_setfield(L, -2, "WindowFlags_MenuBar");
    lua_pushinteger(L, ImGuiWindowFlags_HorizontalScrollbar);
    lua_setfield(L, -2, "WindowFlags_HorizontalScrollbar");
    lua_pushinteger(L, ImGuiWindowFlags_NoFocusOnAppearing);
    lua_setfield(L, -2, "WindowFlags_NoFocusOnAppearing");
    lua_pushinteger(L, ImGuiWindowFlags_NoBringToFrontOnFocus);
    lua_setfield(L, -2, "WindowFlags_NoBringToFrontOnFocus");
    lua_pushinteger(L, ImGuiWindowFlags_AlwaysVerticalScrollbar);
    lua_setfield(L, -2, "WindowFlags_AlwaysVerticalScrollbar");
    lua_pushinteger(L, ImGuiWindowFlags_AlwaysHorizontalScrollbar);
    lua_setfield(L, -2, "WindowFlags_AlwaysHorizontalScrollbar");
    lua_pushinteger(L, ImGuiWindowFlags_AlwaysUseWindowPadding);
    lua_setfield(L, -2, "WindowFlags_AlwaysUseWindowPadding");
    lua_pushinteger(L, ImGuiWindowFlags_NoNavInputs);
    lua_setfield(L, -2, "WindowFlags_NoNavInputs");
    lua_pushinteger(L, ImGuiWindowFlags_NoNavFocus);
    lua_setfield(L, -2, "WindowFlags_NoNavFocus");
    lua_pushinteger(L, ImGuiWindowFlags_UnsavedDocument);
    lua_setfield(L, -2, "WindowFlags_UnsavedDocument");
    lua_pushinteger(L, ImGuiWindowFlags_NoDocking);
    lua_setfield(L, -2, "WindowFlags_NoDocking");
    lua_pushinteger(L, ImGuiWindowFlags_NoNav);
    lua_setfield(L, -2, "WindowFlags_NoNav");
    lua_pushinteger(L, ImGuiWindowFlags_NoDecoration);
    lua_setfield(L, -2, "WindowFlags_NoDecoration");
    lua_pushinteger(L, ImGuiWindowFlags_NoInputs);
    lua_setfield(L, -2, "WindowFlags_NoInputs");
    lua_pushinteger(L, ImGuiWindowFlags_NavFlattened);
    lua_setfield(L, -2, "WindowFlags_NavFlattened");
    lua_pushinteger(L, ImGuiWindowFlags_ChildWindow);
    lua_setfield(L, -2, "WindowFlags_ChildWindow");
    lua_pushinteger(L, ImGuiWindowFlags_Tooltip);
    lua_setfield(L, -2, "WindowFlags_Tooltip");
    lua_pushinteger(L, ImGuiWindowFlags_Popup);
    lua_setfield(L, -2, "WindowFlags_Popup");
    lua_pushinteger(L, ImGuiWindowFlags_Modal);
    lua_setfield(L, -2, "WindowFlags_Modal");
    lua_pushinteger(L, ImGuiWindowFlags_ChildMenu);
    lua_setfield(L, -2, "WindowFlags_ChildMenu");
    lua_pushinteger(L, ImGuiWindowFlags_DockNodeHost);
    lua_setfield(L, -2, "WindowFlags_DockNodeHost");
    lua_pushinteger(L, ImGuiInputTextFlags_None);
    lua_setfield(L, -2, "InputTextFlags_None");
    lua_pushinteger(L, ImGuiInputTextFlags_CharsDecimal);
    lua_setfield(L, -2, "InputTextFlags_CharsDecimal");
    lua_pushinteger(L, ImGuiInputTextFlags_CharsHexadecimal);
    lua_setfield(L, -2, "InputTextFlags_CharsHexadecimal");
    lua_pushinteger(L, ImGuiInputTextFlags_CharsUppercase);
    lua_setfield(L, -2, "InputTextFlags_CharsUppercase");
    lua_pushinteger(L, ImGuiInputTextFlags_CharsNoBlank);
    lua_setfield(L, -2, "InputTextFlags_CharsNoBlank");
    lua_pushinteger(L, ImGuiInputTextFlags_AutoSelectAll);
    lua_setfield(L, -2, "InputTextFlags_AutoSelectAll");
    lua_pushinteger(L, ImGuiInputTextFlags_EnterReturnsTrue);
    lua_setfield(L, -2, "InputTextFlags_EnterReturnsTrue");
    lua_pushinteger(L, ImGuiInputTextFlags_CallbackCompletion);
    lua_setfield(L, -2, "InputTextFlags_CallbackCompletion");
    lua_pushinteger(L, ImGuiInputTextFlags_CallbackHistory);
    lua_setfield(L, -2, "InputTextFlags_CallbackHistory");
    lua_pushinteger(L, ImGuiInputTextFlags_CallbackAlways);
    lua_setfield(L, -2, "InputTextFlags_CallbackAlways");
    lua_pushinteger(L, ImGuiInputTextFlags_CallbackCharFilter);
    lua_setfield(L, -2, "InputTextFlags_CallbackCharFilter");
    lua_pushinteger(L, ImGuiInputTextFlags_AllowTabInput);
    lua_setfield(L, -2, "InputTextFlags_AllowTabInput");
    lua_pushinteger(L, ImGuiInputTextFlags_CtrlEnterForNewLine);
    lua_setfield(L, -2, "InputTextFlags_CtrlEnterForNewLine");
    lua_pushinteger(L, ImGuiInputTextFlags_NoHorizontalScroll);
    lua_setfield(L, -2, "InputTextFlags_NoHorizontalScroll");
    lua_pushinteger(L, ImGuiInputTextFlags_AlwaysOverwrite);
    lua_setfield(L, -2, "InputTextFlags_AlwaysOverwrite");
    lua_pushinteger(L, ImGuiInputTextFlags_ReadOnly);
    lua_setfield(L, -2, "InputTextFlags_ReadOnly");
    lua_pushinteger(L, ImGuiInputTextFlags_Password);
    lua_setfield(L, -2, "InputTextFlags_Password");
    lua_pushinteger(L, ImGuiInputTextFlags_NoUndoRedo);
    lua_setfield(L, -2, "InputTextFlags_NoUndoRedo");
    lua_pushinteger(L, ImGuiInputTextFlags_CharsScientific);
    lua_setfield(L, -2, "InputTextFlags_CharsScientific");
    lua_pushinteger(L, ImGuiInputTextFlags_CallbackResize);
    lua_setfield(L, -2, "InputTextFlags_CallbackResize");
    lua_pushinteger(L, ImGuiInputTextFlags_CallbackEdit);
    lua_setfield(L, -2, "InputTextFlags_CallbackEdit");
    lua_pushinteger(L, ImGuiInputTextFlags_AlwaysInsertMode);
    lua_setfield(L, -2, "InputTextFlags_AlwaysInsertMode");
    lua_pushinteger(L, ImGuiTreeNodeFlags_None);
    lua_setfield(L, -2, "TreeNodeFlags_None");
    lua_pushinteger(L, ImGuiTreeNodeFlags_Selected);
    lua_setfield(L, -2, "TreeNodeFlags_Selected");
    lua_pushinteger(L, ImGuiTreeNodeFlags_Framed);
    lua_setfield(L, -2, "TreeNodeFlags_Framed");
    lua_pushinteger(L, ImGuiTreeNodeFlags_AllowItemOverlap);
    lua_setfield(L, -2, "TreeNodeFlags_AllowItemOverlap");
    lua_pushinteger(L, ImGuiTreeNodeFlags_NoTreePushOnOpen);
    lua_setfield(L, -2, "TreeNodeFlags_NoTreePushOnOpen");
    lua_pushinteger(L, ImGuiTreeNodeFlags_NoAutoOpenOnLog);
    lua_setfield(L, -2, "TreeNodeFlags_NoAutoOpenOnLog");
    lua_pushinteger(L, ImGuiTreeNodeFlags_DefaultOpen);
    lua_setfield(L, -2, "TreeNodeFlags_DefaultOpen");
    lua_pushinteger(L, ImGuiTreeNodeFlags_OpenOnDoubleClick);
    lua_setfield(L, -2, "TreeNodeFlags_OpenOnDoubleClick");
    lua_pushinteger(L, ImGuiTreeNodeFlags_OpenOnArrow);
    lua_setfield(L, -2, "TreeNodeFlags_OpenOnArrow");
    lua_pushinteger(L, ImGuiTreeNodeFlags_Leaf);
    lua_setfield(L, -2, "TreeNodeFlags_Leaf");
    lua_pushinteger(L, ImGuiTreeNodeFlags_Bullet);
    lua_setfield(L, -2, "TreeNodeFlags_Bullet");
    lua_pushinteger(L, ImGuiTreeNodeFlags_FramePadding);
    lua_setfield(L, -2, "TreeNodeFlags_FramePadding");
    lua_pushinteger(L, ImGuiTreeNodeFlags_SpanAvailWidth);
    lua_setfield(L, -2, "TreeNodeFlags_SpanAvailWidth");
    lua_pushinteger(L, ImGuiTreeNodeFlags_SpanFullWidth);
    lua_setfield(L, -2, "TreeNodeFlags_SpanFullWidth");
    lua_pushinteger(L, ImGuiTreeNodeFlags_NavLeftJumpsBackHere);
    lua_setfield(L, -2, "TreeNodeFlags_NavLeftJumpsBackHere");
    lua_pushinteger(L, ImGuiTreeNodeFlags_CollapsingHeader);
    lua_setfield(L, -2, "TreeNodeFlags_CollapsingHeader");
    lua_pushinteger(L, ImGuiPopupFlags_None);
    lua_setfield(L, -2, "PopupFlags_None");
    lua_pushinteger(L, ImGuiPopupFlags_MouseButtonLeft);
    lua_setfield(L, -2, "PopupFlags_MouseButtonLeft");
    lua_pushinteger(L, ImGuiPopupFlags_MouseButtonRight);
    lua_setfield(L, -2, "PopupFlags_MouseButtonRight");
    lua_pushinteger(L, ImGuiPopupFlags_MouseButtonMiddle);
    lua_setfield(L, -2, "PopupFlags_MouseButtonMiddle");
    lua_pushinteger(L, ImGuiPopupFlags_MouseButtonMask_);
    lua_setfield(L, -2, "PopupFlags_MouseButtonMask_");
    lua_pushinteger(L, ImGuiPopupFlags_MouseButtonDefault_);
    lua_setfield(L, -2, "PopupFlags_MouseButtonDefault_");
    lua_pushinteger(L, ImGuiPopupFlags_NoOpenOverExistingPopup);
    lua_setfield(L, -2, "PopupFlags_NoOpenOverExistingPopup");
    lua_pushinteger(L, ImGuiPopupFlags_NoOpenOverItems);
    lua_setfield(L, -2, "PopupFlags_NoOpenOverItems");
    lua_pushinteger(L, ImGuiPopupFlags_AnyPopupId);
    lua_setfield(L, -2, "PopupFlags_AnyPopupId");
    lua_pushinteger(L, ImGuiPopupFlags_AnyPopupLevel);
    lua_setfield(L, -2, "PopupFlags_AnyPopupLevel");
    lua_pushinteger(L, ImGuiPopupFlags_AnyPopup);
    lua_setfield(L, -2, "PopupFlags_AnyPopup");
    lua_pushinteger(L, ImGuiSelectableFlags_None);
    lua_setfield(L, -2, "SelectableFlags_None");
    lua_pushinteger(L, ImGuiSelectableFlags_DontClosePopups);
    lua_setfield(L, -2, "SelectableFlags_DontClosePopups");
    lua_pushinteger(L, ImGuiSelectableFlags_SpanAllColumns);
    lua_setfield(L, -2, "SelectableFlags_SpanAllColumns");
    lua_pushinteger(L, ImGuiSelectableFlags_AllowDoubleClick);
    lua_setfield(L, -2, "SelectableFlags_AllowDoubleClick");
    lua_pushinteger(L, ImGuiSelectableFlags_Disabled);
    lua_setfield(L, -2, "SelectableFlags_Disabled");
    lua_pushinteger(L, ImGuiSelectableFlags_AllowItemOverlap);
    lua_setfield(L, -2, "SelectableFlags_AllowItemOverlap");
    lua_pushinteger(L, ImGuiComboFlags_None);
    lua_setfield(L, -2, "ComboFlags_None");
    lua_pushinteger(L, ImGuiComboFlags_PopupAlignLeft);
    lua_setfield(L, -2, "ComboFlags_PopupAlignLeft");
    lua_pushinteger(L, ImGuiComboFlags_HeightSmall);
    lua_setfield(L, -2, "ComboFlags_HeightSmall");
    lua_pushinteger(L, ImGuiComboFlags_HeightRegular);
    lua_setfield(L, -2, "ComboFlags_HeightRegular");
    lua_pushinteger(L, ImGuiComboFlags_HeightLarge);
    lua_setfield(L, -2, "ComboFlags_HeightLarge");
    lua_pushinteger(L, ImGuiComboFlags_HeightLargest);
    lua_setfield(L, -2, "ComboFlags_HeightLargest");
    lua_pushinteger(L, ImGuiComboFlags_NoArrowButton);
    lua_setfield(L, -2, "ComboFlags_NoArrowButton");
    lua_pushinteger(L, ImGuiComboFlags_NoPreview);
    lua_setfield(L, -2, "ComboFlags_NoPreview");
    lua_pushinteger(L, ImGuiComboFlags_HeightMask_);
    lua_setfield(L, -2, "ComboFlags_HeightMask_");
    lua_pushinteger(L, ImGuiTabBarFlags_None);
    lua_setfield(L, -2, "TabBarFlags_None");
    lua_pushinteger(L, ImGuiTabBarFlags_Reorderable);
    lua_setfield(L, -2, "TabBarFlags_Reorderable");
    lua_pushinteger(L, ImGuiTabBarFlags_AutoSelectNewTabs);
    lua_setfield(L, -2, "TabBarFlags_AutoSelectNewTabs");
    lua_pushinteger(L, ImGuiTabBarFlags_TabListPopupButton);
    lua_setfield(L, -2, "TabBarFlags_TabListPopupButton");
    lua_pushinteger(L, ImGuiTabBarFlags_NoCloseWithMiddleMouseButton);
    lua_setfield(L, -2, "TabBarFlags_NoCloseWithMiddleMouseButton");
    lua_pushinteger(L, ImGuiTabBarFlags_NoTabListScrollingButtons);
    lua_setfield(L, -2, "TabBarFlags_NoTabListScrollingButtons");
    lua_pushinteger(L, ImGuiTabBarFlags_NoTooltip);
    lua_setfield(L, -2, "TabBarFlags_NoTooltip");
    lua_pushinteger(L, ImGuiTabBarFlags_FittingPolicyResizeDown);
    lua_setfield(L, -2, "TabBarFlags_FittingPolicyResizeDown");
    lua_pushinteger(L, ImGuiTabBarFlags_FittingPolicyScroll);
    lua_setfield(L, -2, "TabBarFlags_FittingPolicyScroll");
    lua_pushinteger(L, ImGuiTabBarFlags_FittingPolicyMask_);
    lua_setfield(L, -2, "TabBarFlags_FittingPolicyMask_");
    lua_pushinteger(L, ImGuiTabBarFlags_FittingPolicyDefault_);
    lua_setfield(L, -2, "TabBarFlags_FittingPolicyDefault_");
    lua_pushinteger(L, ImGuiTabItemFlags_None);
    lua_setfield(L, -2, "TabItemFlags_None");
    lua_pushinteger(L, ImGuiTabItemFlags_UnsavedDocument);
    lua_setfield(L, -2, "TabItemFlags_UnsavedDocument");
    lua_pushinteger(L, ImGuiTabItemFlags_SetSelected);
    lua_setfield(L, -2, "TabItemFlags_SetSelected");
    lua_pushinteger(L, ImGuiTabItemFlags_NoCloseWithMiddleMouseButton);
    lua_setfield(L, -2, "TabItemFlags_NoCloseWithMiddleMouseButton");
    lua_pushinteger(L, ImGuiTabItemFlags_NoPushId);
    lua_setfield(L, -2, "TabItemFlags_NoPushId");
    lua_pushinteger(L, ImGuiTabItemFlags_NoTooltip);
    lua_setfield(L, -2, "TabItemFlags_NoTooltip");
    lua_pushinteger(L, ImGuiTabItemFlags_NoReorder);
    lua_setfield(L, -2, "TabItemFlags_NoReorder");
    lua_pushinteger(L, ImGuiTabItemFlags_Leading);
    lua_setfield(L, -2, "TabItemFlags_Leading");
    lua_pushinteger(L, ImGuiTabItemFlags_Trailing);
    lua_setfield(L, -2, "TabItemFlags_Trailing");
    lua_pushinteger(L, ImGuiTableFlags_None);
    lua_setfield(L, -2, "TableFlags_None");
    lua_pushinteger(L, ImGuiTableFlags_Resizable);
    lua_setfield(L, -2, "TableFlags_Resizable");
    lua_pushinteger(L, ImGuiTableFlags_Reorderable);
    lua_setfield(L, -2, "TableFlags_Reorderable");
    lua_pushinteger(L, ImGuiTableFlags_Hideable);
    lua_setfield(L, -2, "TableFlags_Hideable");
    lua_pushinteger(L, ImGuiTableFlags_Sortable);
    lua_setfield(L, -2, "TableFlags_Sortable");
    lua_pushinteger(L, ImGuiTableFlags_NoSavedSettings);
    lua_setfield(L, -2, "TableFlags_NoSavedSettings");
    lua_pushinteger(L, ImGuiTableFlags_ContextMenuInBody);
    lua_setfield(L, -2, "TableFlags_ContextMenuInBody");
    lua_pushinteger(L, ImGuiTableFlags_RowBg);
    lua_setfield(L, -2, "TableFlags_RowBg");
    lua_pushinteger(L, ImGuiTableFlags_BordersInnerH);
    lua_setfield(L, -2, "TableFlags_BordersInnerH");
    lua_pushinteger(L, ImGuiTableFlags_BordersOuterH);
    lua_setfield(L, -2, "TableFlags_BordersOuterH");
    lua_pushinteger(L, ImGuiTableFlags_BordersInnerV);
    lua_setfield(L, -2, "TableFlags_BordersInnerV");
    lua_pushinteger(L, ImGuiTableFlags_BordersOuterV);
    lua_setfield(L, -2, "TableFlags_BordersOuterV");
    lua_pushinteger(L, ImGuiTableFlags_BordersH);
    lua_setfield(L, -2, "TableFlags_BordersH");
    lua_pushinteger(L, ImGuiTableFlags_BordersV);
    lua_setfield(L, -2, "TableFlags_BordersV");
    lua_pushinteger(L, ImGuiTableFlags_BordersInner);
    lua_setfield(L, -2, "TableFlags_BordersInner");
    lua_pushinteger(L, ImGuiTableFlags_BordersOuter);
    lua_setfield(L, -2, "TableFlags_BordersOuter");
    lua_pushinteger(L, ImGuiTableFlags_Borders);
    lua_setfield(L, -2, "TableFlags_Borders");
    lua_pushinteger(L, ImGuiTableFlags_NoBordersInBody);
    lua_setfield(L, -2, "TableFlags_NoBordersInBody");
    lua_pushinteger(L, ImGuiTableFlags_NoBordersInBodyUntilResize);
    lua_setfield(L, -2, "TableFlags_NoBordersInBodyUntilResize");
    lua_pushinteger(L, ImGuiTableFlags_SizingFixedFit);
    lua_setfield(L, -2, "TableFlags_SizingFixedFit");
    lua_pushinteger(L, ImGuiTableFlags_SizingFixedSame);
    lua_setfield(L, -2, "TableFlags_SizingFixedSame");
    lua_pushinteger(L, ImGuiTableFlags_SizingStretchProp);
    lua_setfield(L, -2, "TableFlags_SizingStretchProp");
    lua_pushinteger(L, ImGuiTableFlags_SizingStretchSame);
    lua_setfield(L, -2, "TableFlags_SizingStretchSame");
    lua_pushinteger(L, ImGuiTableFlags_NoHostExtendX);
    lua_setfield(L, -2, "TableFlags_NoHostExtendX");
    lua_pushinteger(L, ImGuiTableFlags_NoHostExtendY);
    lua_setfield(L, -2, "TableFlags_NoHostExtendY");
    lua_pushinteger(L, ImGuiTableFlags_NoKeepColumnsVisible);
    lua_setfield(L, -2, "TableFlags_NoKeepColumnsVisible");
    lua_pushinteger(L, ImGuiTableFlags_PreciseWidths);
    lua_setfield(L, -2, "TableFlags_PreciseWidths");
    lua_pushinteger(L, ImGuiTableFlags_NoClip);
    lua_setfield(L, -2, "TableFlags_NoClip");
    lua_pushinteger(L, ImGuiTableFlags_PadOuterX);
    lua_setfield(L, -2, "TableFlags_PadOuterX");
    lua_pushinteger(L, ImGuiTableFlags_NoPadOuterX);
    lua_setfield(L, -2, "TableFlags_NoPadOuterX");
    lua_pushinteger(L, ImGuiTableFlags_NoPadInnerX);
    lua_setfield(L, -2, "TableFlags_NoPadInnerX");
    lua_pushinteger(L, ImGuiTableFlags_ScrollX);
    lua_setfield(L, -2, "TableFlags_ScrollX");
    lua_pushinteger(L, ImGuiTableFlags_ScrollY);
    lua_setfield(L, -2, "TableFlags_ScrollY");
    lua_pushinteger(L, ImGuiTableFlags_SortMulti);
    lua_setfield(L, -2, "TableFlags_SortMulti");
    lua_pushinteger(L, ImGuiTableFlags_SortTristate);
    lua_setfield(L, -2, "TableFlags_SortTristate");
    lua_pushinteger(L, ImGuiTableFlags_SizingMask_);
    lua_setfield(L, -2, "TableFlags_SizingMask_");
    lua_pushinteger(L, ImGuiTableColumnFlags_None);
    lua_setfield(L, -2, "TableColumnFlags_None");
    lua_pushinteger(L, ImGuiTableColumnFlags_Disabled);
    lua_setfield(L, -2, "TableColumnFlags_Disabled");
    lua_pushinteger(L, ImGuiTableColumnFlags_DefaultHide);
    lua_setfield(L, -2, "TableColumnFlags_DefaultHide");
    lua_pushinteger(L, ImGuiTableColumnFlags_DefaultSort);
    lua_setfield(L, -2, "TableColumnFlags_DefaultSort");
    lua_pushinteger(L, ImGuiTableColumnFlags_WidthStretch);
    lua_setfield(L, -2, "TableColumnFlags_WidthStretch");
    lua_pushinteger(L, ImGuiTableColumnFlags_WidthFixed);
    lua_setfield(L, -2, "TableColumnFlags_WidthFixed");
    lua_pushinteger(L, ImGuiTableColumnFlags_NoResize);
    lua_setfield(L, -2, "TableColumnFlags_NoResize");
    lua_pushinteger(L, ImGuiTableColumnFlags_NoReorder);
    lua_setfield(L, -2, "TableColumnFlags_NoReorder");
    lua_pushinteger(L, ImGuiTableColumnFlags_NoHide);
    lua_setfield(L, -2, "TableColumnFlags_NoHide");
    lua_pushinteger(L, ImGuiTableColumnFlags_NoClip);
    lua_setfield(L, -2, "TableColumnFlags_NoClip");
    lua_pushinteger(L, ImGuiTableColumnFlags_NoSort);
    lua_setfield(L, -2, "TableColumnFlags_NoSort");
    lua_pushinteger(L, ImGuiTableColumnFlags_NoSortAscending);
    lua_setfield(L, -2, "TableColumnFlags_NoSortAscending");
    lua_pushinteger(L, ImGuiTableColumnFlags_NoSortDescending);
    lua_setfield(L, -2, "TableColumnFlags_NoSortDescending");
    lua_pushinteger(L, ImGuiTableColumnFlags_NoHeaderLabel);
    lua_setfield(L, -2, "TableColumnFlags_NoHeaderLabel");
    lua_pushinteger(L, ImGuiTableColumnFlags_NoHeaderWidth);
    lua_setfield(L, -2, "TableColumnFlags_NoHeaderWidth");
    lua_pushinteger(L, ImGuiTableColumnFlags_PreferSortAscending);
    lua_setfield(L, -2, "TableColumnFlags_PreferSortAscending");
    lua_pushinteger(L, ImGuiTableColumnFlags_PreferSortDescending);
    lua_setfield(L, -2, "TableColumnFlags_PreferSortDescending");
    lua_pushinteger(L, ImGuiTableColumnFlags_IndentEnable);
    lua_setfield(L, -2, "TableColumnFlags_IndentEnable");
    lua_pushinteger(L, ImGuiTableColumnFlags_IndentDisable);
    lua_setfield(L, -2, "TableColumnFlags_IndentDisable");
    lua_pushinteger(L, ImGuiTableColumnFlags_IsEnabled);
    lua_setfield(L, -2, "TableColumnFlags_IsEnabled");
    lua_pushinteger(L, ImGuiTableColumnFlags_IsVisible);
    lua_setfield(L, -2, "TableColumnFlags_IsVisible");
    lua_pushinteger(L, ImGuiTableColumnFlags_IsSorted);
    lua_setfield(L, -2, "TableColumnFlags_IsSorted");
    lua_pushinteger(L, ImGuiTableColumnFlags_IsHovered);
    lua_setfield(L, -2, "TableColumnFlags_IsHovered");
    lua_pushinteger(L, ImGuiTableColumnFlags_WidthMask_);
    lua_setfield(L, -2, "TableColumnFlags_WidthMask_");
    lua_pushinteger(L, ImGuiTableColumnFlags_IndentMask_);
    lua_setfield(L, -2, "TableColumnFlags_IndentMask_");
    lua_pushinteger(L, ImGuiTableColumnFlags_StatusMask_);
    lua_setfield(L, -2, "TableColumnFlags_StatusMask_");
    lua_pushinteger(L, ImGuiTableColumnFlags_NoDirectResize_);
    lua_setfield(L, -2, "TableColumnFlags_NoDirectResize_");
    lua_pushinteger(L, ImGuiTableRowFlags_None);
    lua_setfield(L, -2, "TableRowFlags_None");
    lua_pushinteger(L, ImGuiTableRowFlags_Headers);
    lua_setfield(L, -2, "TableRowFlags_Headers");
    lua_pushinteger(L, ImGuiTableBgTarget_None);
    lua_setfield(L, -2, "TableBgTarget_None");
    lua_pushinteger(L, ImGuiTableBgTarget_RowBg0);
    lua_setfield(L, -2, "TableBgTarget_RowBg0");
    lua_pushinteger(L, ImGuiTableBgTarget_RowBg1);
    lua_setfield(L, -2, "TableBgTarget_RowBg1");
    lua_pushinteger(L, ImGuiTableBgTarget_CellBg);
    lua_setfield(L, -2, "TableBgTarget_CellBg");
    lua_pushinteger(L, ImGuiFocusedFlags_None);
    lua_setfield(L, -2, "FocusedFlags_None");
    lua_pushinteger(L, ImGuiFocusedFlags_ChildWindows);
    lua_setfield(L, -2, "FocusedFlags_ChildWindows");
    lua_pushinteger(L, ImGuiFocusedFlags_RootWindow);
    lua_setfield(L, -2, "FocusedFlags_RootWindow");
    lua_pushinteger(L, ImGuiFocusedFlags_AnyWindow);
    lua_setfield(L, -2, "FocusedFlags_AnyWindow");
    lua_pushinteger(L, ImGuiFocusedFlags_NoPopupHierarchy);
    lua_setfield(L, -2, "FocusedFlags_NoPopupHierarchy");
    lua_pushinteger(L, ImGuiFocusedFlags_DockHierarchy);
    lua_setfield(L, -2, "FocusedFlags_DockHierarchy");
    lua_pushinteger(L, ImGuiFocusedFlags_RootAndChildWindows);
    lua_setfield(L, -2, "FocusedFlags_RootAndChildWindows");
    lua_pushinteger(L, ImGuiHoveredFlags_None);
    lua_setfield(L, -2, "HoveredFlags_None");
    lua_pushinteger(L, ImGuiHoveredFlags_ChildWindows);
    lua_setfield(L, -2, "HoveredFlags_ChildWindows");
    lua_pushinteger(L, ImGuiHoveredFlags_RootWindow);
    lua_setfield(L, -2, "HoveredFlags_RootWindow");
    lua_pushinteger(L, ImGuiHoveredFlags_AnyWindow);
    lua_setfield(L, -2, "HoveredFlags_AnyWindow");
    lua_pushinteger(L, ImGuiHoveredFlags_NoPopupHierarchy);
    lua_setfield(L, -2, "HoveredFlags_NoPopupHierarchy");
    lua_pushinteger(L, ImGuiHoveredFlags_DockHierarchy);
    lua_setfield(L, -2, "HoveredFlags_DockHierarchy");
    lua_pushinteger(L, ImGuiHoveredFlags_AllowWhenBlockedByPopup);
    lua_setfield(L, -2, "HoveredFlags_AllowWhenBlockedByPopup");
    lua_pushinteger(L, ImGuiHoveredFlags_AllowWhenBlockedByActiveItem);
    lua_setfield(L, -2, "HoveredFlags_AllowWhenBlockedByActiveItem");
    lua_pushinteger(L, ImGuiHoveredFlags_AllowWhenOverlapped);
    lua_setfield(L, -2, "HoveredFlags_AllowWhenOverlapped");
    lua_pushinteger(L, ImGuiHoveredFlags_AllowWhenDisabled);
    lua_setfield(L, -2, "HoveredFlags_AllowWhenDisabled");
    lua_pushinteger(L, ImGuiHoveredFlags_NoNavOverride);
    lua_setfield(L, -2, "HoveredFlags_NoNavOverride");
    lua_pushinteger(L, ImGuiHoveredFlags_RectOnly);
    lua_setfield(L, -2, "HoveredFlags_RectOnly");
    lua_pushinteger(L, ImGuiHoveredFlags_RootAndChildWindows);
    lua_setfield(L, -2, "HoveredFlags_RootAndChildWindows");
    lua_pushinteger(L, ImGuiHoveredFlags_DelayNormal);
    lua_setfield(L, -2, "HoveredFlags_DelayNormal");
    lua_pushinteger(L, ImGuiHoveredFlags_DelayShort);
    lua_setfield(L, -2, "HoveredFlags_DelayShort");
    lua_pushinteger(L, ImGuiHoveredFlags_NoSharedDelay);
    lua_setfield(L, -2, "HoveredFlags_NoSharedDelay");
    lua_pushinteger(L, ImGuiDockNodeFlags_None);
    lua_setfield(L, -2, "DockNodeFlags_None");
    lua_pushinteger(L, ImGuiDockNodeFlags_KeepAliveOnly);
    lua_setfield(L, -2, "DockNodeFlags_KeepAliveOnly");
    lua_pushinteger(L, ImGuiDockNodeFlags_NoDockingInCentralNode);
    lua_setfield(L, -2, "DockNodeFlags_NoDockingInCentralNode");
    lua_pushinteger(L, ImGuiDockNodeFlags_PassthruCentralNode);
    lua_setfield(L, -2, "DockNodeFlags_PassthruCentralNode");
    lua_pushinteger(L, ImGuiDockNodeFlags_NoSplit);
    lua_setfield(L, -2, "DockNodeFlags_NoSplit");
    lua_pushinteger(L, ImGuiDockNodeFlags_NoResize);
    lua_setfield(L, -2, "DockNodeFlags_NoResize");
    lua_pushinteger(L, ImGuiDockNodeFlags_AutoHideTabBar);
    lua_setfield(L, -2, "DockNodeFlags_AutoHideTabBar");
    lua_pushinteger(L, ImGuiDragDropFlags_None);
    lua_setfield(L, -2, "DragDropFlags_None");
    lua_pushinteger(L, ImGuiDragDropFlags_SourceNoPreviewTooltip);
    lua_setfield(L, -2, "DragDropFlags_SourceNoPreviewTooltip");
    lua_pushinteger(L, ImGuiDragDropFlags_SourceNoDisableHover);
    lua_setfield(L, -2, "DragDropFlags_SourceNoDisableHover");
    lua_pushinteger(L, ImGuiDragDropFlags_SourceNoHoldToOpenOthers);
    lua_setfield(L, -2, "DragDropFlags_SourceNoHoldToOpenOthers");
    lua_pushinteger(L, ImGuiDragDropFlags_SourceAllowNullID);
    lua_setfield(L, -2, "DragDropFlags_SourceAllowNullID");
    lua_pushinteger(L, ImGuiDragDropFlags_SourceExtern);
    lua_setfield(L, -2, "DragDropFlags_SourceExtern");
    lua_pushinteger(L, ImGuiDragDropFlags_SourceAutoExpirePayload);
    lua_setfield(L, -2, "DragDropFlags_SourceAutoExpirePayload");
    lua_pushinteger(L, ImGuiDragDropFlags_AcceptBeforeDelivery);
    lua_setfield(L, -2, "DragDropFlags_AcceptBeforeDelivery");
    lua_pushinteger(L, ImGuiDragDropFlags_AcceptNoDrawDefaultRect);
    lua_setfield(L, -2, "DragDropFlags_AcceptNoDrawDefaultRect");
    lua_pushinteger(L, ImGuiDragDropFlags_AcceptNoPreviewTooltip);
    lua_setfield(L, -2, "DragDropFlags_AcceptNoPreviewTooltip");
    lua_pushinteger(L, ImGuiDragDropFlags_AcceptPeekOnly);
    lua_setfield(L, -2, "DragDropFlags_AcceptPeekOnly");
    lua_pushinteger(L, ImGuiDataType_S8);
    lua_setfield(L, -2, "DataType_S8");
    lua_pushinteger(L, ImGuiDataType_U8);
    lua_setfield(L, -2, "DataType_U8");
    lua_pushinteger(L, ImGuiDataType_S16);
    lua_setfield(L, -2, "DataType_S16");
    lua_pushinteger(L, ImGuiDataType_U16);
    lua_setfield(L, -2, "DataType_U16");
    lua_pushinteger(L, ImGuiDataType_S32);
    lua_setfield(L, -2, "DataType_S32");
    lua_pushinteger(L, ImGuiDataType_U32);
    lua_setfield(L, -2, "DataType_U32");
    lua_pushinteger(L, ImGuiDataType_S64);
    lua_setfield(L, -2, "DataType_S64");
    lua_pushinteger(L, ImGuiDataType_U64);
    lua_setfield(L, -2, "DataType_U64");
    lua_pushinteger(L, ImGuiDataType_Float);
    lua_setfield(L, -2, "DataType_Float");
    lua_pushinteger(L, ImGuiDataType_Double);
    lua_setfield(L, -2, "DataType_Double");
    lua_pushinteger(L, ImGuiDataType_COUNT);
    lua_setfield(L, -2, "DataType_COUNT");
    lua_pushinteger(L, ImGuiDir_None);
    lua_setfield(L, -2, "Dir_None");
    lua_pushinteger(L, ImGuiDir_Left);
    lua_setfield(L, -2, "Dir_Left");
    lua_pushinteger(L, ImGuiDir_Right);
    lua_setfield(L, -2, "Dir_Right");
    lua_pushinteger(L, ImGuiDir_Up);
    lua_setfield(L, -2, "Dir_Up");
    lua_pushinteger(L, ImGuiDir_Down);
    lua_setfield(L, -2, "Dir_Down");
    lua_pushinteger(L, ImGuiDir_COUNT);
    lua_setfield(L, -2, "Dir_COUNT");
    lua_pushinteger(L, ImGuiSortDirection_None);
    lua_setfield(L, -2, "SortDirection_None");
    lua_pushinteger(L, ImGuiSortDirection_Ascending);
    lua_setfield(L, -2, "SortDirection_Ascending");
    lua_pushinteger(L, ImGuiSortDirection_Descending);
    lua_setfield(L, -2, "SortDirection_Descending");
    lua_pushinteger(L, ImGuiKey_None);
    lua_setfield(L, -2, "Key_None");
    lua_pushinteger(L, ImGuiKey_Tab);
    lua_setfield(L, -2, "Key_Tab");
    lua_pushinteger(L, ImGuiKey_LeftArrow);
    lua_setfield(L, -2, "Key_LeftArrow");
    lua_pushinteger(L, ImGuiKey_RightArrow);
    lua_setfield(L, -2, "Key_RightArrow");
    lua_pushinteger(L, ImGuiKey_UpArrow);
    lua_setfield(L, -2, "Key_UpArrow");
    lua_pushinteger(L, ImGuiKey_DownArrow);
    lua_setfield(L, -2, "Key_DownArrow");
    lua_pushinteger(L, ImGuiKey_PageUp);
    lua_setfield(L, -2, "Key_PageUp");
    lua_pushinteger(L, ImGuiKey_PageDown);
    lua_setfield(L, -2, "Key_PageDown");
    lua_pushinteger(L, ImGuiKey_Home);
    lua_setfield(L, -2, "Key_Home");
    lua_pushinteger(L, ImGuiKey_End);
    lua_setfield(L, -2, "Key_End");
    lua_pushinteger(L, ImGuiKey_Insert);
    lua_setfield(L, -2, "Key_Insert");
    lua_pushinteger(L, ImGuiKey_Delete);
    lua_setfield(L, -2, "Key_Delete");
    lua_pushinteger(L, ImGuiKey_Backspace);
    lua_setfield(L, -2, "Key_Backspace");
    lua_pushinteger(L, ImGuiKey_Space);
    lua_setfield(L, -2, "Key_Space");
    lua_pushinteger(L, ImGuiKey_Enter);
    lua_setfield(L, -2, "Key_Enter");
    lua_pushinteger(L, ImGuiKey_Escape);
    lua_setfield(L, -2, "Key_Escape");
    lua_pushinteger(L, ImGuiKey_LeftCtrl);
    lua_setfield(L, -2, "Key_LeftCtrl");
    lua_pushinteger(L, ImGuiKey_LeftShift);
    lua_setfield(L, -2, "Key_LeftShift");
    lua_pushinteger(L, ImGuiKey_LeftAlt);
    lua_setfield(L, -2, "Key_LeftAlt");
    lua_pushinteger(L, ImGuiKey_LeftSuper);
    lua_setfield(L, -2, "Key_LeftSuper");
    lua_pushinteger(L, ImGuiKey_RightCtrl);
    lua_setfield(L, -2, "Key_RightCtrl");
    lua_pushinteger(L, ImGuiKey_RightShift);
    lua_setfield(L, -2, "Key_RightShift");
    lua_pushinteger(L, ImGuiKey_RightAlt);
    lua_setfield(L, -2, "Key_RightAlt");
    lua_pushinteger(L, ImGuiKey_RightSuper);
    lua_setfield(L, -2, "Key_RightSuper");
    lua_pushinteger(L, ImGuiKey_Menu);
    lua_setfield(L, -2, "Key_Menu");
    lua_pushinteger(L, ImGuiKey_0);
    lua_setfield(L, -2, "Key_0");
    lua_pushinteger(L, ImGuiKey_1);
    lua_setfield(L, -2, "Key_1");
    lua_pushinteger(L, ImGuiKey_2);
    lua_setfield(L, -2, "Key_2");
    lua_pushinteger(L, ImGuiKey_3);
    lua_setfield(L, -2, "Key_3");
    lua_pushinteger(L, ImGuiKey_4);
    lua_setfield(L, -2, "Key_4");
    lua_pushinteger(L, ImGuiKey_5);
    lua_setfield(L, -2, "Key_5");
    lua_pushinteger(L, ImGuiKey_6);
    lua_setfield(L, -2, "Key_6");
    lua_pushinteger(L, ImGuiKey_7);
    lua_setfield(L, -2, "Key_7");
    lua_pushinteger(L, ImGuiKey_8);
    lua_setfield(L, -2, "Key_8");
    lua_pushinteger(L, ImGuiKey_9);
    lua_setfield(L, -2, "Key_9");
    lua_pushinteger(L, ImGuiKey_A);
    lua_setfield(L, -2, "Key_A");
    lua_pushinteger(L, ImGuiKey_B);
    lua_setfield(L, -2, "Key_B");
    lua_pushinteger(L, ImGuiKey_C);
    lua_setfield(L, -2, "Key_C");
    lua_pushinteger(L, ImGuiKey_D);
    lua_setfield(L, -2, "Key_D");
    lua_pushinteger(L, ImGuiKey_E);
    lua_setfield(L, -2, "Key_E");
    lua_pushinteger(L, ImGuiKey_F);
    lua_setfield(L, -2, "Key_F");
    lua_pushinteger(L, ImGuiKey_G);
    lua_setfield(L, -2, "Key_G");
    lua_pushinteger(L, ImGuiKey_H);
    lua_setfield(L, -2, "Key_H");
    lua_pushinteger(L, ImGuiKey_I);
    lua_setfield(L, -2, "Key_I");
    lua_pushinteger(L, ImGuiKey_J);
    lua_setfield(L, -2, "Key_J");
    lua_pushinteger(L, ImGuiKey_K);
    lua_setfield(L, -2, "Key_K");
    lua_pushinteger(L, ImGuiKey_L);
    lua_setfield(L, -2, "Key_L");
    lua_pushinteger(L, ImGuiKey_M);
    lua_setfield(L, -2, "Key_M");
    lua_pushinteger(L, ImGuiKey_N);
    lua_setfield(L, -2, "Key_N");
    lua_pushinteger(L, ImGuiKey_O);
    lua_setfield(L, -2, "Key_O");
    lua_pushinteger(L, ImGuiKey_P);
    lua_setfield(L, -2, "Key_P");
    lua_pushinteger(L, ImGuiKey_Q);
    lua_setfield(L, -2, "Key_Q");
    lua_pushinteger(L, ImGuiKey_R);
    lua_setfield(L, -2, "Key_R");
    lua_pushinteger(L, ImGuiKey_S);
    lua_setfield(L, -2, "Key_S");
    lua_pushinteger(L, ImGuiKey_T);
    lua_setfield(L, -2, "Key_T");
    lua_pushinteger(L, ImGuiKey_U);
    lua_setfield(L, -2, "Key_U");
    lua_pushinteger(L, ImGuiKey_V);
    lua_setfield(L, -2, "Key_V");
    lua_pushinteger(L, ImGuiKey_W);
    lua_setfield(L, -2, "Key_W");
    lua_pushinteger(L, ImGuiKey_X);
    lua_setfield(L, -2, "Key_X");
    lua_pushinteger(L, ImGuiKey_Y);
    lua_setfield(L, -2, "Key_Y");
    lua_pushinteger(L, ImGuiKey_Z);
    lua_setfield(L, -2, "Key_Z");
    lua_pushinteger(L, ImGuiKey_F1);
    lua_setfield(L, -2, "Key_F1");
    lua_pushinteger(L, ImGuiKey_F2);
    lua_setfield(L, -2, "Key_F2");
    lua_pushinteger(L, ImGuiKey_F3);
    lua_setfield(L, -2, "Key_F3");
    lua_pushinteger(L, ImGuiKey_F4);
    lua_setfield(L, -2, "Key_F4");
    lua_pushinteger(L, ImGuiKey_F5);
    lua_setfield(L, -2, "Key_F5");
    lua_pushinteger(L, ImGuiKey_F6);
    lua_setfield(L, -2, "Key_F6");
    lua_pushinteger(L, ImGuiKey_F7);
    lua_setfield(L, -2, "Key_F7");
    lua_pushinteger(L, ImGuiKey_F8);
    lua_setfield(L, -2, "Key_F8");
    lua_pushinteger(L, ImGuiKey_F9);
    lua_setfield(L, -2, "Key_F9");
    lua_pushinteger(L, ImGuiKey_F10);
    lua_setfield(L, -2, "Key_F10");
    lua_pushinteger(L, ImGuiKey_F11);
    lua_setfield(L, -2, "Key_F11");
    lua_pushinteger(L, ImGuiKey_F12);
    lua_setfield(L, -2, "Key_F12");
    lua_pushinteger(L, ImGuiKey_Apostrophe);
    lua_setfield(L, -2, "Key_Apostrophe");
    lua_pushinteger(L, ImGuiKey_Comma);
    lua_setfield(L, -2, "Key_Comma");
    lua_pushinteger(L, ImGuiKey_Minus);
    lua_setfield(L, -2, "Key_Minus");
    lua_pushinteger(L, ImGuiKey_Period);
    lua_setfield(L, -2, "Key_Period");
    lua_pushinteger(L, ImGuiKey_Slash);
    lua_setfield(L, -2, "Key_Slash");
    lua_pushinteger(L, ImGuiKey_Semicolon);
    lua_setfield(L, -2, "Key_Semicolon");
    lua_pushinteger(L, ImGuiKey_Equal);
    lua_setfield(L, -2, "Key_Equal");
    lua_pushinteger(L, ImGuiKey_LeftBracket);
    lua_setfield(L, -2, "Key_LeftBracket");
    lua_pushinteger(L, ImGuiKey_Backslash);
    lua_setfield(L, -2, "Key_Backslash");
    lua_pushinteger(L, ImGuiKey_RightBracket);
    lua_setfield(L, -2, "Key_RightBracket");
    lua_pushinteger(L, ImGuiKey_GraveAccent);
    lua_setfield(L, -2, "Key_GraveAccent");
    lua_pushinteger(L, ImGuiKey_CapsLock);
    lua_setfield(L, -2, "Key_CapsLock");
    lua_pushinteger(L, ImGuiKey_ScrollLock);
    lua_setfield(L, -2, "Key_ScrollLock");
    lua_pushinteger(L, ImGuiKey_NumLock);
    lua_setfield(L, -2, "Key_NumLock");
    lua_pushinteger(L, ImGuiKey_PrintScreen);
    lua_setfield(L, -2, "Key_PrintScreen");
    lua_pushinteger(L, ImGuiKey_Pause);
    lua_setfield(L, -2, "Key_Pause");
    lua_pushinteger(L, ImGuiKey_Keypad0);
    lua_setfield(L, -2, "Key_Keypad0");
    lua_pushinteger(L, ImGuiKey_Keypad1);
    lua_setfield(L, -2, "Key_Keypad1");
    lua_pushinteger(L, ImGuiKey_Keypad2);
    lua_setfield(L, -2, "Key_Keypad2");
    lua_pushinteger(L, ImGuiKey_Keypad3);
    lua_setfield(L, -2, "Key_Keypad3");
    lua_pushinteger(L, ImGuiKey_Keypad4);
    lua_setfield(L, -2, "Key_Keypad4");
    lua_pushinteger(L, ImGuiKey_Keypad5);
    lua_setfield(L, -2, "Key_Keypad5");
    lua_pushinteger(L, ImGuiKey_Keypad6);
    lua_setfield(L, -2, "Key_Keypad6");
    lua_pushinteger(L, ImGuiKey_Keypad7);
    lua_setfield(L, -2, "Key_Keypad7");
    lua_pushinteger(L, ImGuiKey_Keypad8);
    lua_setfield(L, -2, "Key_Keypad8");
    lua_pushinteger(L, ImGuiKey_Keypad9);
    lua_setfield(L, -2, "Key_Keypad9");
    lua_pushinteger(L, ImGuiKey_KeypadDecimal);
    lua_setfield(L, -2, "Key_KeypadDecimal");
    lua_pushinteger(L, ImGuiKey_KeypadDivide);
    lua_setfield(L, -2, "Key_KeypadDivide");
    lua_pushinteger(L, ImGuiKey_KeypadMultiply);
    lua_setfield(L, -2, "Key_KeypadMultiply");
    lua_pushinteger(L, ImGuiKey_KeypadSubtract);
    lua_setfield(L, -2, "Key_KeypadSubtract");
    lua_pushinteger(L, ImGuiKey_KeypadAdd);
    lua_setfield(L, -2, "Key_KeypadAdd");
    lua_pushinteger(L, ImGuiKey_KeypadEnter);
    lua_setfield(L, -2, "Key_KeypadEnter");
    lua_pushinteger(L, ImGuiKey_KeypadEqual);
    lua_setfield(L, -2, "Key_KeypadEqual");
    lua_pushinteger(L, ImGuiKey_GamepadStart);
    lua_setfield(L, -2, "Key_GamepadStart");
    lua_pushinteger(L, ImGuiKey_GamepadBack);
    lua_setfield(L, -2, "Key_GamepadBack");
    lua_pushinteger(L, ImGuiKey_GamepadFaceLeft);
    lua_setfield(L, -2, "Key_GamepadFaceLeft");
    lua_pushinteger(L, ImGuiKey_GamepadFaceRight);
    lua_setfield(L, -2, "Key_GamepadFaceRight");
    lua_pushinteger(L, ImGuiKey_GamepadFaceUp);
    lua_setfield(L, -2, "Key_GamepadFaceUp");
    lua_pushinteger(L, ImGuiKey_GamepadFaceDown);
    lua_setfield(L, -2, "Key_GamepadFaceDown");
    lua_pushinteger(L, ImGuiKey_GamepadDpadLeft);
    lua_setfield(L, -2, "Key_GamepadDpadLeft");
    lua_pushinteger(L, ImGuiKey_GamepadDpadRight);
    lua_setfield(L, -2, "Key_GamepadDpadRight");
    lua_pushinteger(L, ImGuiKey_GamepadDpadUp);
    lua_setfield(L, -2, "Key_GamepadDpadUp");
    lua_pushinteger(L, ImGuiKey_GamepadDpadDown);
    lua_setfield(L, -2, "Key_GamepadDpadDown");
    lua_pushinteger(L, ImGuiKey_GamepadL1);
    lua_setfield(L, -2, "Key_GamepadL1");
    lua_pushinteger(L, ImGuiKey_GamepadR1);
    lua_setfield(L, -2, "Key_GamepadR1");
    lua_pushinteger(L, ImGuiKey_GamepadL2);
    lua_setfield(L, -2, "Key_GamepadL2");
    lua_pushinteger(L, ImGuiKey_GamepadR2);
    lua_setfield(L, -2, "Key_GamepadR2");
    lua_pushinteger(L, ImGuiKey_GamepadL3);
    lua_setfield(L, -2, "Key_GamepadL3");
    lua_pushinteger(L, ImGuiKey_GamepadR3);
    lua_setfield(L, -2, "Key_GamepadR3");
    lua_pushinteger(L, ImGuiKey_GamepadLStickLeft);
    lua_setfield(L, -2, "Key_GamepadLStickLeft");
    lua_pushinteger(L, ImGuiKey_GamepadLStickRight);
    lua_setfield(L, -2, "Key_GamepadLStickRight");
    lua_pushinteger(L, ImGuiKey_GamepadLStickUp);
    lua_setfield(L, -2, "Key_GamepadLStickUp");
    lua_pushinteger(L, ImGuiKey_GamepadLStickDown);
    lua_setfield(L, -2, "Key_GamepadLStickDown");
    lua_pushinteger(L, ImGuiKey_GamepadRStickLeft);
    lua_setfield(L, -2, "Key_GamepadRStickLeft");
    lua_pushinteger(L, ImGuiKey_GamepadRStickRight);
    lua_setfield(L, -2, "Key_GamepadRStickRight");
    lua_pushinteger(L, ImGuiKey_GamepadRStickUp);
    lua_setfield(L, -2, "Key_GamepadRStickUp");
    lua_pushinteger(L, ImGuiKey_GamepadRStickDown);
    lua_setfield(L, -2, "Key_GamepadRStickDown");
    lua_pushinteger(L, ImGuiKey_ModCtrl);
    lua_setfield(L, -2, "Key_ModCtrl");
    lua_pushinteger(L, ImGuiKey_ModShift);
    lua_setfield(L, -2, "Key_ModShift");
    lua_pushinteger(L, ImGuiKey_ModAlt);
    lua_setfield(L, -2, "Key_ModAlt");
    lua_pushinteger(L, ImGuiKey_ModSuper);
    lua_setfield(L, -2, "Key_ModSuper");
    lua_pushinteger(L, ImGuiKey_MouseLeft);
    lua_setfield(L, -2, "Key_MouseLeft");
    lua_pushinteger(L, ImGuiKey_MouseRight);
    lua_setfield(L, -2, "Key_MouseRight");
    lua_pushinteger(L, ImGuiKey_MouseMiddle);
    lua_setfield(L, -2, "Key_MouseMiddle");
    lua_pushinteger(L, ImGuiKey_MouseX1);
    lua_setfield(L, -2, "Key_MouseX1");
    lua_pushinteger(L, ImGuiKey_MouseX2);
    lua_setfield(L, -2, "Key_MouseX2");
    lua_pushinteger(L, ImGuiKey_MouseWheelX);
    lua_setfield(L, -2, "Key_MouseWheelX");
    lua_pushinteger(L, ImGuiKey_MouseWheelY);
    lua_setfield(L, -2, "Key_MouseWheelY");
    lua_pushinteger(L, ImGuiKey_COUNT);
    lua_setfield(L, -2, "Key_COUNT");
    lua_pushinteger(L, ImGuiKey_NamedKey_BEGIN);
    lua_setfield(L, -2, "Key_NamedKey_BEGIN");
    lua_pushinteger(L, ImGuiKey_NamedKey_END);
    lua_setfield(L, -2, "Key_NamedKey_END");
    lua_pushinteger(L, ImGuiKey_NamedKey_COUNT);
    lua_setfield(L, -2, "Key_NamedKey_COUNT");
    lua_pushinteger(L, ImGuiKey_KeysData_SIZE);
    lua_setfield(L, -2, "Key_KeysData_SIZE");
    lua_pushinteger(L, ImGuiKey_KeysData_OFFSET);
    lua_setfield(L, -2, "Key_KeysData_OFFSET");
    lua_pushinteger(L, ImGuiKey_KeysData_SIZE);
    lua_setfield(L, -2, "Key_KeysData_SIZE");
    lua_pushinteger(L, ImGuiKey_KeysData_OFFSET);
    lua_setfield(L, -2, "Key_KeysData_OFFSET");
    lua_pushinteger(L, ImGuiKey_KeyPadEnter);
    lua_setfield(L, -2, "Key_KeyPadEnter");
    lua_pushinteger(L, ImGuiModFlags_None);
    lua_setfield(L, -2, "ModFlags_None");
    lua_pushinteger(L, ImGuiModFlags_Ctrl);
    lua_setfield(L, -2, "ModFlags_Ctrl");
    lua_pushinteger(L, ImGuiModFlags_Shift);
    lua_setfield(L, -2, "ModFlags_Shift");
    lua_pushinteger(L, ImGuiModFlags_Alt);
    lua_setfield(L, -2, "ModFlags_Alt");
    lua_pushinteger(L, ImGuiModFlags_Super);
    lua_setfield(L, -2, "ModFlags_Super");
    lua_pushinteger(L, ImGuiModFlags_All);
    lua_setfield(L, -2, "ModFlags_All");
    lua_pushinteger(L, ImGuiNavInput_Activate);
    lua_setfield(L, -2, "NavInput_Activate");
    lua_pushinteger(L, ImGuiNavInput_Cancel);
    lua_setfield(L, -2, "NavInput_Cancel");
    lua_pushinteger(L, ImGuiNavInput_Input);
    lua_setfield(L, -2, "NavInput_Input");
    lua_pushinteger(L, ImGuiNavInput_Menu);
    lua_setfield(L, -2, "NavInput_Menu");
    lua_pushinteger(L, ImGuiNavInput_DpadLeft);
    lua_setfield(L, -2, "NavInput_DpadLeft");
    lua_pushinteger(L, ImGuiNavInput_DpadRight);
    lua_setfield(L, -2, "NavInput_DpadRight");
    lua_pushinteger(L, ImGuiNavInput_DpadUp);
    lua_setfield(L, -2, "NavInput_DpadUp");
    lua_pushinteger(L, ImGuiNavInput_DpadDown);
    lua_setfield(L, -2, "NavInput_DpadDown");
    lua_pushinteger(L, ImGuiNavInput_LStickLeft);
    lua_setfield(L, -2, "NavInput_LStickLeft");
    lua_pushinteger(L, ImGuiNavInput_LStickRight);
    lua_setfield(L, -2, "NavInput_LStickRight");
    lua_pushinteger(L, ImGuiNavInput_LStickUp);
    lua_setfield(L, -2, "NavInput_LStickUp");
    lua_pushinteger(L, ImGuiNavInput_LStickDown);
    lua_setfield(L, -2, "NavInput_LStickDown");
    lua_pushinteger(L, ImGuiNavInput_FocusPrev);
    lua_setfield(L, -2, "NavInput_FocusPrev");
    lua_pushinteger(L, ImGuiNavInput_FocusNext);
    lua_setfield(L, -2, "NavInput_FocusNext");
    lua_pushinteger(L, ImGuiNavInput_TweakSlow);
    lua_setfield(L, -2, "NavInput_TweakSlow");
    lua_pushinteger(L, ImGuiNavInput_TweakFast);
    lua_setfield(L, -2, "NavInput_TweakFast");
    lua_pushinteger(L, ImGuiNavInput_COUNT);
    lua_setfield(L, -2, "NavInput_COUNT");
    lua_pushinteger(L, ImGuiConfigFlags_None);
    lua_setfield(L, -2, "ConfigFlags_None");
    lua_pushinteger(L, ImGuiConfigFlags_NavEnableKeyboard);
    lua_setfield(L, -2, "ConfigFlags_NavEnableKeyboard");
    lua_pushinteger(L, ImGuiConfigFlags_NavEnableGamepad);
    lua_setfield(L, -2, "ConfigFlags_NavEnableGamepad");
    lua_pushinteger(L, ImGuiConfigFlags_NavEnableSetMousePos);
    lua_setfield(L, -2, "ConfigFlags_NavEnableSetMousePos");
    lua_pushinteger(L, ImGuiConfigFlags_NavNoCaptureKeyboard);
    lua_setfield(L, -2, "ConfigFlags_NavNoCaptureKeyboard");
    lua_pushinteger(L, ImGuiConfigFlags_NoMouse);
    lua_setfield(L, -2, "ConfigFlags_NoMouse");
    lua_pushinteger(L, ImGuiConfigFlags_NoMouseCursorChange);
    lua_setfield(L, -2, "ConfigFlags_NoMouseCursorChange");
    lua_pushinteger(L, ImGuiConfigFlags_DockingEnable);
    lua_setfield(L, -2, "ConfigFlags_DockingEnable");
    lua_pushinteger(L, ImGuiConfigFlags_ViewportsEnable);
    lua_setfield(L, -2, "ConfigFlags_ViewportsEnable");
    lua_pushinteger(L, ImGuiConfigFlags_DpiEnableScaleViewports);
    lua_setfield(L, -2, "ConfigFlags_DpiEnableScaleViewports");
    lua_pushinteger(L, ImGuiConfigFlags_DpiEnableScaleFonts);
    lua_setfield(L, -2, "ConfigFlags_DpiEnableScaleFonts");
    lua_pushinteger(L, ImGuiConfigFlags_IsSRGB);
    lua_setfield(L, -2, "ConfigFlags_IsSRGB");
    lua_pushinteger(L, ImGuiConfigFlags_IsTouchScreen);
    lua_setfield(L, -2, "ConfigFlags_IsTouchScreen");
    lua_pushinteger(L, ImGuiBackendFlags_None);
    lua_setfield(L, -2, "BackendFlags_None");
    lua_pushinteger(L, ImGuiBackendFlags_HasGamepad);
    lua_setfield(L, -2, "BackendFlags_HasGamepad");
    lua_pushinteger(L, ImGuiBackendFlags_HasMouseCursors);
    lua_setfield(L, -2, "BackendFlags_HasMouseCursors");
    lua_pushinteger(L, ImGuiBackendFlags_HasSetMousePos);
    lua_setfield(L, -2, "BackendFlags_HasSetMousePos");
    lua_pushinteger(L, ImGuiBackendFlags_RendererHasVtxOffset);
    lua_setfield(L, -2, "BackendFlags_RendererHasVtxOffset");
    lua_pushinteger(L, ImGuiBackendFlags_PlatformHasViewports);
    lua_setfield(L, -2, "BackendFlags_PlatformHasViewports");
    lua_pushinteger(L, ImGuiBackendFlags_HasMouseHoveredViewport);
    lua_setfield(L, -2, "BackendFlags_HasMouseHoveredViewport");
    lua_pushinteger(L, ImGuiBackendFlags_RendererHasViewports);
    lua_setfield(L, -2, "BackendFlags_RendererHasViewports");
    lua_pushinteger(L, ImGuiCol_Text);
    lua_setfield(L, -2, "Col_Text");
    lua_pushinteger(L, ImGuiCol_TextDisabled);
    lua_setfield(L, -2, "Col_TextDisabled");
    lua_pushinteger(L, ImGuiCol_WindowBg);
    lua_setfield(L, -2, "Col_WindowBg");
    lua_pushinteger(L, ImGuiCol_ChildBg);
    lua_setfield(L, -2, "Col_ChildBg");
    lua_pushinteger(L, ImGuiCol_PopupBg);
    lua_setfield(L, -2, "Col_PopupBg");
    lua_pushinteger(L, ImGuiCol_Border);
    lua_setfield(L, -2, "Col_Border");
    lua_pushinteger(L, ImGuiCol_BorderShadow);
    lua_setfield(L, -2, "Col_BorderShadow");
    lua_pushinteger(L, ImGuiCol_FrameBg);
    lua_setfield(L, -2, "Col_FrameBg");
    lua_pushinteger(L, ImGuiCol_FrameBgHovered);
    lua_setfield(L, -2, "Col_FrameBgHovered");
    lua_pushinteger(L, ImGuiCol_FrameBgActive);
    lua_setfield(L, -2, "Col_FrameBgActive");
    lua_pushinteger(L, ImGuiCol_TitleBg);
    lua_setfield(L, -2, "Col_TitleBg");
    lua_pushinteger(L, ImGuiCol_TitleBgActive);
    lua_setfield(L, -2, "Col_TitleBgActive");
    lua_pushinteger(L, ImGuiCol_TitleBgCollapsed);
    lua_setfield(L, -2, "Col_TitleBgCollapsed");
    lua_pushinteger(L, ImGuiCol_MenuBarBg);
    lua_setfield(L, -2, "Col_MenuBarBg");
    lua_pushinteger(L, ImGuiCol_ScrollbarBg);
    lua_setfield(L, -2, "Col_ScrollbarBg");
    lua_pushinteger(L, ImGuiCol_ScrollbarGrab);
    lua_setfield(L, -2, "Col_ScrollbarGrab");
    lua_pushinteger(L, ImGuiCol_ScrollbarGrabHovered);
    lua_setfield(L, -2, "Col_ScrollbarGrabHovered");
    lua_pushinteger(L, ImGuiCol_ScrollbarGrabActive);
    lua_setfield(L, -2, "Col_ScrollbarGrabActive");
    lua_pushinteger(L, ImGuiCol_CheckMark);
    lua_setfield(L, -2, "Col_CheckMark");
    lua_pushinteger(L, ImGuiCol_SliderGrab);
    lua_setfield(L, -2, "Col_SliderGrab");
    lua_pushinteger(L, ImGuiCol_SliderGrabActive);
    lua_setfield(L, -2, "Col_SliderGrabActive");
    lua_pushinteger(L, ImGuiCol_Button);
    lua_setfield(L, -2, "Col_Button");
    lua_pushinteger(L, ImGuiCol_ButtonHovered);
    lua_setfield(L, -2, "Col_ButtonHovered");
    lua_pushinteger(L, ImGuiCol_ButtonActive);
    lua_setfield(L, -2, "Col_ButtonActive");
    lua_pushinteger(L, ImGuiCol_Header);
    lua_setfield(L, -2, "Col_Header");
    lua_pushinteger(L, ImGuiCol_HeaderHovered);
    lua_setfield(L, -2, "Col_HeaderHovered");
    lua_pushinteger(L, ImGuiCol_HeaderActive);
    lua_setfield(L, -2, "Col_HeaderActive");
    lua_pushinteger(L, ImGuiCol_Separator);
    lua_setfield(L, -2, "Col_Separator");
    lua_pushinteger(L, ImGuiCol_SeparatorHovered);
    lua_setfield(L, -2, "Col_SeparatorHovered");
    lua_pushinteger(L, ImGuiCol_SeparatorActive);
    lua_setfield(L, -2, "Col_SeparatorActive");
    lua_pushinteger(L, ImGuiCol_ResizeGrip);
    lua_setfield(L, -2, "Col_ResizeGrip");
    lua_pushinteger(L, ImGuiCol_ResizeGripHovered);
    lua_setfield(L, -2, "Col_ResizeGripHovered");
    lua_pushinteger(L, ImGuiCol_ResizeGripActive);
    lua_setfield(L, -2, "Col_ResizeGripActive");
    lua_pushinteger(L, ImGuiCol_Tab);
    lua_setfield(L, -2, "Col_Tab");
    lua_pushinteger(L, ImGuiCol_TabHovered);
    lua_setfield(L, -2, "Col_TabHovered");
    lua_pushinteger(L, ImGuiCol_TabActive);
    lua_setfield(L, -2, "Col_TabActive");
    lua_pushinteger(L, ImGuiCol_TabUnfocused);
    lua_setfield(L, -2, "Col_TabUnfocused");
    lua_pushinteger(L, ImGuiCol_TabUnfocusedActive);
    lua_setfield(L, -2, "Col_TabUnfocusedActive");
    lua_pushinteger(L, ImGuiCol_DockingPreview);
    lua_setfield(L, -2, "Col_DockingPreview");
    lua_pushinteger(L, ImGuiCol_DockingEmptyBg);
    lua_setfield(L, -2, "Col_DockingEmptyBg");
    lua_pushinteger(L, ImGuiCol_PlotLines);
    lua_setfield(L, -2, "Col_PlotLines");
    lua_pushinteger(L, ImGuiCol_PlotLinesHovered);
    lua_setfield(L, -2, "Col_PlotLinesHovered");
    lua_pushinteger(L, ImGuiCol_PlotHistogram);
    lua_setfield(L, -2, "Col_PlotHistogram");
    lua_pushinteger(L, ImGuiCol_PlotHistogramHovered);
    lua_setfield(L, -2, "Col_PlotHistogramHovered");
    lua_pushinteger(L, ImGuiCol_TableHeaderBg);
    lua_setfield(L, -2, "Col_TableHeaderBg");
    lua_pushinteger(L, ImGuiCol_TableBorderStrong);
    lua_setfield(L, -2, "Col_TableBorderStrong");
    lua_pushinteger(L, ImGuiCol_TableBorderLight);
    lua_setfield(L, -2, "Col_TableBorderLight");
    lua_pushinteger(L, ImGuiCol_TableRowBg);
    lua_setfield(L, -2, "Col_TableRowBg");
    lua_pushinteger(L, ImGuiCol_TableRowBgAlt);
    lua_setfield(L, -2, "Col_TableRowBgAlt");
    lua_pushinteger(L, ImGuiCol_TextSelectedBg);
    lua_setfield(L, -2, "Col_TextSelectedBg");
    lua_pushinteger(L, ImGuiCol_DragDropTarget);
    lua_setfield(L, -2, "Col_DragDropTarget");
    lua_pushinteger(L, ImGuiCol_NavHighlight);
    lua_setfield(L, -2, "Col_NavHighlight");
    lua_pushinteger(L, ImGuiCol_NavWindowingHighlight);
    lua_setfield(L, -2, "Col_NavWindowingHighlight");
    lua_pushinteger(L, ImGuiCol_NavWindowingDimBg);
    lua_setfield(L, -2, "Col_NavWindowingDimBg");
    lua_pushinteger(L, ImGuiCol_ModalWindowDimBg);
    lua_setfield(L, -2, "Col_ModalWindowDimBg");
    lua_pushinteger(L, ImGuiCol_COUNT);
    lua_setfield(L, -2, "Col_COUNT");
    lua_pushinteger(L, ImGuiStyleVar_Alpha);
    lua_setfield(L, -2, "StyleVar_Alpha");
    lua_pushinteger(L, ImGuiStyleVar_DisabledAlpha);
    lua_setfield(L, -2, "StyleVar_DisabledAlpha");
    lua_pushinteger(L, ImGuiStyleVar_WindowPadding);
    lua_setfield(L, -2, "StyleVar_WindowPadding");
    lua_pushinteger(L, ImGuiStyleVar_WindowRounding);
    lua_setfield(L, -2, "StyleVar_WindowRounding");
    lua_pushinteger(L, ImGuiStyleVar_WindowBorderSize);
    lua_setfield(L, -2, "StyleVar_WindowBorderSize");
    lua_pushinteger(L, ImGuiStyleVar_WindowMinSize);
    lua_setfield(L, -2, "StyleVar_WindowMinSize");
    lua_pushinteger(L, ImGuiStyleVar_WindowTitleAlign);
    lua_setfield(L, -2, "StyleVar_WindowTitleAlign");
    lua_pushinteger(L, ImGuiStyleVar_ChildRounding);
    lua_setfield(L, -2, "StyleVar_ChildRounding");
    lua_pushinteger(L, ImGuiStyleVar_ChildBorderSize);
    lua_setfield(L, -2, "StyleVar_ChildBorderSize");
    lua_pushinteger(L, ImGuiStyleVar_PopupRounding);
    lua_setfield(L, -2, "StyleVar_PopupRounding");
    lua_pushinteger(L, ImGuiStyleVar_PopupBorderSize);
    lua_setfield(L, -2, "StyleVar_PopupBorderSize");
    lua_pushinteger(L, ImGuiStyleVar_FramePadding);
    lua_setfield(L, -2, "StyleVar_FramePadding");
    lua_pushinteger(L, ImGuiStyleVar_FrameRounding);
    lua_setfield(L, -2, "StyleVar_FrameRounding");
    lua_pushinteger(L, ImGuiStyleVar_FrameBorderSize);
    lua_setfield(L, -2, "StyleVar_FrameBorderSize");
    lua_pushinteger(L, ImGuiStyleVar_ItemSpacing);
    lua_setfield(L, -2, "StyleVar_ItemSpacing");
    lua_pushinteger(L, ImGuiStyleVar_ItemInnerSpacing);
    lua_setfield(L, -2, "StyleVar_ItemInnerSpacing");
    lua_pushinteger(L, ImGuiStyleVar_IndentSpacing);
    lua_setfield(L, -2, "StyleVar_IndentSpacing");
    lua_pushinteger(L, ImGuiStyleVar_CellPadding);
    lua_setfield(L, -2, "StyleVar_CellPadding");
    lua_pushinteger(L, ImGuiStyleVar_ScrollbarSize);
    lua_setfield(L, -2, "StyleVar_ScrollbarSize");
    lua_pushinteger(L, ImGuiStyleVar_ScrollbarRounding);
    lua_setfield(L, -2, "StyleVar_ScrollbarRounding");
    lua_pushinteger(L, ImGuiStyleVar_GrabMinSize);
    lua_setfield(L, -2, "StyleVar_GrabMinSize");
    lua_pushinteger(L, ImGuiStyleVar_GrabRounding);
    lua_setfield(L, -2, "StyleVar_GrabRounding");
    lua_pushinteger(L, ImGuiStyleVar_TabRounding);
    lua_setfield(L, -2, "StyleVar_TabRounding");
    lua_pushinteger(L, ImGuiStyleVar_ButtonTextAlign);
    lua_setfield(L, -2, "StyleVar_ButtonTextAlign");
    lua_pushinteger(L, ImGuiStyleVar_SelectableTextAlign);
    lua_setfield(L, -2, "StyleVar_SelectableTextAlign");
    lua_pushinteger(L, ImGuiStyleVar_COUNT);
    lua_setfield(L, -2, "StyleVar_COUNT");
    lua_pushinteger(L, ImGuiButtonFlags_None);
    lua_setfield(L, -2, "ButtonFlags_None");
    lua_pushinteger(L, ImGuiButtonFlags_MouseButtonLeft);
    lua_setfield(L, -2, "ButtonFlags_MouseButtonLeft");
    lua_pushinteger(L, ImGuiButtonFlags_MouseButtonRight);
    lua_setfield(L, -2, "ButtonFlags_MouseButtonRight");
    lua_pushinteger(L, ImGuiButtonFlags_MouseButtonMiddle);
    lua_setfield(L, -2, "ButtonFlags_MouseButtonMiddle");
    lua_pushinteger(L, ImGuiButtonFlags_MouseButtonMask_);
    lua_setfield(L, -2, "ButtonFlags_MouseButtonMask_");
    lua_pushinteger(L, ImGuiButtonFlags_MouseButtonDefault_);
    lua_setfield(L, -2, "ButtonFlags_MouseButtonDefault_");
    lua_pushinteger(L, ImGuiColorEditFlags_None);
    lua_setfield(L, -2, "ColorEditFlags_None");
    lua_pushinteger(L, ImGuiColorEditFlags_NoAlpha);
    lua_setfield(L, -2, "ColorEditFlags_NoAlpha");
    lua_pushinteger(L, ImGuiColorEditFlags_NoPicker);
    lua_setfield(L, -2, "ColorEditFlags_NoPicker");
    lua_pushinteger(L, ImGuiColorEditFlags_NoOptions);
    lua_setfield(L, -2, "ColorEditFlags_NoOptions");
    lua_pushinteger(L, ImGuiColorEditFlags_NoSmallPreview);
    lua_setfield(L, -2, "ColorEditFlags_NoSmallPreview");
    lua_pushinteger(L, ImGuiColorEditFlags_NoInputs);
    lua_setfield(L, -2, "ColorEditFlags_NoInputs");
    lua_pushinteger(L, ImGuiColorEditFlags_NoTooltip);
    lua_setfield(L, -2, "ColorEditFlags_NoTooltip");
    lua_pushinteger(L, ImGuiColorEditFlags_NoLabel);
    lua_setfield(L, -2, "ColorEditFlags_NoLabel");
    lua_pushinteger(L, ImGuiColorEditFlags_NoSidePreview);
    lua_setfield(L, -2, "ColorEditFlags_NoSidePreview");
    lua_pushinteger(L, ImGuiColorEditFlags_NoDragDrop);
    lua_setfield(L, -2, "ColorEditFlags_NoDragDrop");
    lua_pushinteger(L, ImGuiColorEditFlags_NoBorder);
    lua_setfield(L, -2, "ColorEditFlags_NoBorder");
    lua_pushinteger(L, ImGuiColorEditFlags_AlphaBar);
    lua_setfield(L, -2, "ColorEditFlags_AlphaBar");
    lua_pushinteger(L, ImGuiColorEditFlags_AlphaPreview);
    lua_setfield(L, -2, "ColorEditFlags_AlphaPreview");
    lua_pushinteger(L, ImGuiColorEditFlags_AlphaPreviewHalf);
    lua_setfield(L, -2, "ColorEditFlags_AlphaPreviewHalf");
    lua_pushinteger(L, ImGuiColorEditFlags_HDR);
    lua_setfield(L, -2, "ColorEditFlags_HDR");
    lua_pushinteger(L, ImGuiColorEditFlags_DisplayRGB);
    lua_setfield(L, -2, "ColorEditFlags_DisplayRGB");
    lua_pushinteger(L, ImGuiColorEditFlags_DisplayHSV);
    lua_setfield(L, -2, "ColorEditFlags_DisplayHSV");
    lua_pushinteger(L, ImGuiColorEditFlags_DisplayHex);
    lua_setfield(L, -2, "ColorEditFlags_DisplayHex");
    lua_pushinteger(L, ImGuiColorEditFlags_Uint8);
    lua_setfield(L, -2, "ColorEditFlags_Uint8");
    lua_pushinteger(L, ImGuiColorEditFlags_Float);
    lua_setfield(L, -2, "ColorEditFlags_Float");
    lua_pushinteger(L, ImGuiColorEditFlags_PickerHueBar);
    lua_setfield(L, -2, "ColorEditFlags_PickerHueBar");
    lua_pushinteger(L, ImGuiColorEditFlags_PickerHueWheel);
    lua_setfield(L, -2, "ColorEditFlags_PickerHueWheel");
    lua_pushinteger(L, ImGuiColorEditFlags_InputRGB);
    lua_setfield(L, -2, "ColorEditFlags_InputRGB");
    lua_pushinteger(L, ImGuiColorEditFlags_InputHSV);
    lua_setfield(L, -2, "ColorEditFlags_InputHSV");
    lua_pushinteger(L, ImGuiColorEditFlags_DefaultOptions_);
    lua_setfield(L, -2, "ColorEditFlags_DefaultOptions_");
    lua_pushinteger(L, ImGuiColorEditFlags_DisplayMask_);
    lua_setfield(L, -2, "ColorEditFlags_DisplayMask_");
    lua_pushinteger(L, ImGuiColorEditFlags_DataTypeMask_);
    lua_setfield(L, -2, "ColorEditFlags_DataTypeMask_");
    lua_pushinteger(L, ImGuiColorEditFlags_PickerMask_);
    lua_setfield(L, -2, "ColorEditFlags_PickerMask_");
    lua_pushinteger(L, ImGuiColorEditFlags_InputMask_);
    lua_setfield(L, -2, "ColorEditFlags_InputMask_");
    lua_pushinteger(L, ImGuiSliderFlags_None);
    lua_setfield(L, -2, "SliderFlags_None");
    lua_pushinteger(L, ImGuiSliderFlags_AlwaysClamp);
    lua_setfield(L, -2, "SliderFlags_AlwaysClamp");
    lua_pushinteger(L, ImGuiSliderFlags_Logarithmic);
    lua_setfield(L, -2, "SliderFlags_Logarithmic");
    lua_pushinteger(L, ImGuiSliderFlags_NoRoundToFormat);
    lua_setfield(L, -2, "SliderFlags_NoRoundToFormat");
    lua_pushinteger(L, ImGuiSliderFlags_NoInput);
    lua_setfield(L, -2, "SliderFlags_NoInput");
    lua_pushinteger(L, ImGuiSliderFlags_InvalidMask_);
    lua_setfield(L, -2, "SliderFlags_InvalidMask_");
    lua_pushinteger(L, ImGuiSliderFlags_ClampOnInput);
    lua_setfield(L, -2, "SliderFlags_ClampOnInput");
    lua_pushinteger(L, ImGuiMouseButton_Left);
    lua_setfield(L, -2, "MouseButton_Left");
    lua_pushinteger(L, ImGuiMouseButton_Right);
    lua_setfield(L, -2, "MouseButton_Right");
    lua_pushinteger(L, ImGuiMouseButton_Middle);
    lua_setfield(L, -2, "MouseButton_Middle");
    lua_pushinteger(L, ImGuiMouseButton_COUNT);
    lua_setfield(L, -2, "MouseButton_COUNT");
    lua_pushinteger(L, ImGuiMouseCursor_None);
    lua_setfield(L, -2, "MouseCursor_None");
    lua_pushinteger(L, ImGuiMouseCursor_Arrow);
    lua_setfield(L, -2, "MouseCursor_Arrow");
    lua_pushinteger(L, ImGuiMouseCursor_TextInput);
    lua_setfield(L, -2, "MouseCursor_TextInput");
    lua_pushinteger(L, ImGuiMouseCursor_ResizeAll);
    lua_setfield(L, -2, "MouseCursor_ResizeAll");
    lua_pushinteger(L, ImGuiMouseCursor_ResizeNS);
    lua_setfield(L, -2, "MouseCursor_ResizeNS");
    lua_pushinteger(L, ImGuiMouseCursor_ResizeEW);
    lua_setfield(L, -2, "MouseCursor_ResizeEW");
    lua_pushinteger(L, ImGuiMouseCursor_ResizeNESW);
    lua_setfield(L, -2, "MouseCursor_ResizeNESW");
    lua_pushinteger(L, ImGuiMouseCursor_ResizeNWSE);
    lua_setfield(L, -2, "MouseCursor_ResizeNWSE");
    lua_pushinteger(L, ImGuiMouseCursor_Hand);
    lua_setfield(L, -2, "MouseCursor_Hand");
    lua_pushinteger(L, ImGuiMouseCursor_NotAllowed);
    lua_setfield(L, -2, "MouseCursor_NotAllowed");
    lua_pushinteger(L, ImGuiMouseCursor_COUNT);
    lua_setfield(L, -2, "MouseCursor_COUNT");
    lua_pushinteger(L, ImGuiCond_None);
    lua_setfield(L, -2, "Cond_None");
    lua_pushinteger(L, ImGuiCond_Always);
    lua_setfield(L, -2, "Cond_Always");
    lua_pushinteger(L, ImGuiCond_Once);
    lua_setfield(L, -2, "Cond_Once");
    lua_pushinteger(L, ImGuiCond_FirstUseEver);
    lua_setfield(L, -2, "Cond_FirstUseEver");
    lua_pushinteger(L, ImGuiCond_Appearing);
    lua_setfield(L, -2, "Cond_Appearing");
    lua_pushinteger(L, ImDrawFlags_None);
    lua_setfield(L, -2, "ImDrawFlags_None");
    lua_pushinteger(L, ImDrawFlags_Closed);
    lua_setfield(L, -2, "ImDrawFlags_Closed");
    lua_pushinteger(L, ImDrawFlags_RoundCornersTopLeft);
    lua_setfield(L, -2, "ImDrawFlags_RoundCornersTopLeft");
    lua_pushinteger(L, ImDrawFlags_RoundCornersTopRight);
    lua_setfield(L, -2, "ImDrawFlags_RoundCornersTopRight");
    lua_pushinteger(L, ImDrawFlags_RoundCornersBottomLeft);
    lua_setfield(L, -2, "ImDrawFlags_RoundCornersBottomLeft");
    lua_pushinteger(L, ImDrawFlags_RoundCornersBottomRight);
    lua_setfield(L, -2, "ImDrawFlags_RoundCornersBottomRight");
    lua_pushinteger(L, ImDrawFlags_RoundCornersNone);
    lua_setfield(L, -2, "ImDrawFlags_RoundCornersNone");
    lua_pushinteger(L, ImDrawFlags_RoundCornersTop);
    lua_setfield(L, -2, "ImDrawFlags_RoundCornersTop");
    lua_pushinteger(L, ImDrawFlags_RoundCornersBottom);
    lua_setfield(L, -2, "ImDrawFlags_RoundCornersBottom");
    lua_pushinteger(L, ImDrawFlags_RoundCornersLeft);
    lua_setfield(L, -2, "ImDrawFlags_RoundCornersLeft");
    lua_pushinteger(L, ImDrawFlags_RoundCornersRight);
    lua_setfield(L, -2, "ImDrawFlags_RoundCornersRight");
    lua_pushinteger(L, ImDrawFlags_RoundCornersAll);
    lua_setfield(L, -2, "ImDrawFlags_RoundCornersAll");
    lua_pushinteger(L, ImDrawFlags_RoundCornersDefault_);
    lua_setfield(L, -2, "ImDrawFlags_RoundCornersDefault_");
    lua_pushinteger(L, ImDrawFlags_RoundCornersMask_);
    lua_setfield(L, -2, "ImDrawFlags_RoundCornersMask_");
    lua_pushinteger(L, ImDrawListFlags_None);
    lua_setfield(L, -2, "ImDrawListFlags_None");
    lua_pushinteger(L, ImDrawListFlags_AntiAliasedLines);
    lua_setfield(L, -2, "ImDrawListFlags_AntiAliasedLines");
    lua_pushinteger(L, ImDrawListFlags_AntiAliasedLinesUseTex);
    lua_setfield(L, -2, "ImDrawListFlags_AntiAliasedLinesUseTex");
    lua_pushinteger(L, ImDrawListFlags_AntiAliasedFill);
    lua_setfield(L, -2, "ImDrawListFlags_AntiAliasedFill");
    lua_pushinteger(L, ImDrawListFlags_AllowVtxOffset);
    lua_setfield(L, -2, "ImDrawListFlags_AllowVtxOffset");
    lua_pushinteger(L, ImFontAtlasFlags_None);
    lua_setfield(L, -2, "ImFontAtlasFlags_None");
    lua_pushinteger(L, ImFontAtlasFlags_NoPowerOfTwoHeight);
    lua_setfield(L, -2, "ImFontAtlasFlags_NoPowerOfTwoHeight");
    lua_pushinteger(L, ImFontAtlasFlags_NoMouseCursors);
    lua_setfield(L, -2, "ImFontAtlasFlags_NoMouseCursors");
    lua_pushinteger(L, ImFontAtlasFlags_NoBakedLines);
    lua_setfield(L, -2, "ImFontAtlasFlags_NoBakedLines");
    lua_pushinteger(L, ImGuiViewportFlags_None);
    lua_setfield(L, -2, "ViewportFlags_None");
    lua_pushinteger(L, ImGuiViewportFlags_IsPlatformWindow);
    lua_setfield(L, -2, "ViewportFlags_IsPlatformWindow");
    lua_pushinteger(L, ImGuiViewportFlags_IsPlatformMonitor);
    lua_setfield(L, -2, "ViewportFlags_IsPlatformMonitor");
    lua_pushinteger(L, ImGuiViewportFlags_OwnedByApp);
    lua_setfield(L, -2, "ViewportFlags_OwnedByApp");
    lua_pushinteger(L, ImGuiViewportFlags_NoDecoration);
    lua_setfield(L, -2, "ViewportFlags_NoDecoration");
    lua_pushinteger(L, ImGuiViewportFlags_NoTaskBarIcon);
    lua_setfield(L, -2, "ViewportFlags_NoTaskBarIcon");
    lua_pushinteger(L, ImGuiViewportFlags_NoFocusOnAppearing);
    lua_setfield(L, -2, "ViewportFlags_NoFocusOnAppearing");
    lua_pushinteger(L, ImGuiViewportFlags_NoFocusOnClick);
    lua_setfield(L, -2, "ViewportFlags_NoFocusOnClick");
    lua_pushinteger(L, ImGuiViewportFlags_NoInputs);
    lua_setfield(L, -2, "ViewportFlags_NoInputs");
    lua_pushinteger(L, ImGuiViewportFlags_NoRendererClear);
    lua_setfield(L, -2, "ViewportFlags_NoRendererClear");
    lua_pushinteger(L, ImGuiViewportFlags_TopMost);
    lua_setfield(L, -2, "ViewportFlags_TopMost");
    lua_pushinteger(L, ImGuiViewportFlags_Minimized);
    lua_setfield(L, -2, "ViewportFlags_Minimized");
    lua_pushinteger(L, ImGuiViewportFlags_NoAutoMerge);
    lua_setfield(L, -2, "ViewportFlags_NoAutoMerge");
    lua_pushinteger(L, ImGuiViewportFlags_CanHostOtherWindows);
    lua_setfield(L, -2, "ViewportFlags_CanHostOtherWindows");
    lua_pushinteger(L, ImDrawCornerFlags_None);
    lua_setfield(L, -2, "ImDrawCornerFlags_None");
    lua_pushinteger(L, ImDrawCornerFlags_TopLeft);
    lua_setfield(L, -2, "ImDrawCornerFlags_TopLeft");
    lua_pushinteger(L, ImDrawCornerFlags_TopRight);
    lua_setfield(L, -2, "ImDrawCornerFlags_TopRight");
    lua_pushinteger(L, ImDrawCornerFlags_BotLeft);
    lua_setfield(L, -2, "ImDrawCornerFlags_BotLeft");
    lua_pushinteger(L, ImDrawCornerFlags_BotRight);
    lua_setfield(L, -2, "ImDrawCornerFlags_BotRight");
    lua_pushinteger(L, ImDrawCornerFlags_All);
    lua_setfield(L, -2, "ImDrawCornerFlags_All");
    lua_pushinteger(L, ImDrawCornerFlags_Top);
    lua_setfield(L, -2, "ImDrawCornerFlags_Top");
    lua_pushinteger(L, ImDrawCornerFlags_Bot);
    lua_setfield(L, -2, "ImDrawCornerFlags_Bot");
    lua_pushinteger(L, ImDrawCornerFlags_Left);
    lua_setfield(L, -2, "ImDrawCornerFlags_Left");
    lua_pushinteger(L, ImDrawCornerFlags_Right);
    lua_setfield(L, -2, "ImDrawCornerFlags_Right");
    lua_pushinteger(L, ImGuiKeyModFlags_None);
    lua_setfield(L, -2, "KeyModFlags_None");
    lua_pushinteger(L, ImGuiKeyModFlags_Ctrl);
    lua_setfield(L, -2, "KeyModFlags_Ctrl");
    lua_pushinteger(L, ImGuiKeyModFlags_Shift);
    lua_setfield(L, -2, "KeyModFlags_Shift");
    lua_pushinteger(L, ImGuiKeyModFlags_Alt);
    lua_setfield(L, -2, "KeyModFlags_Alt");
    lua_pushinteger(L, ImGuiKeyModFlags_Super);
    lua_setfield(L, -2, "KeyModFlags_Super");

    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_NewFrame();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "NewFrame");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_EndFrame();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "EndFrame");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_Render();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "Render");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool _p_open;

            _p_open = lua_toboolean(L, 1) != 0;

            bool* p_open = &_p_open;

            ImGui_ShowDemoWindow(p_open);

            lua_pushboolean(L, _p_open);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ShowDemoWindow");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool _p_open;

            _p_open = lua_toboolean(L, 1) != 0;

            bool* p_open = &_p_open;

            ImGui_ShowMetricsWindow(p_open);

            lua_pushboolean(L, _p_open);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ShowMetricsWindow");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool _p_open;

            _p_open = lua_toboolean(L, 1) != 0;

            bool* p_open = &_p_open;

            ImGui_ShowDebugLogWindow(p_open);

            lua_pushboolean(L, _p_open);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ShowDebugLogWindow");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool _p_open;

            _p_open = lua_toboolean(L, 1) != 0;

            bool* p_open = &_p_open;

            ImGui_ShowStackToolWindow(p_open);

            lua_pushboolean(L, _p_open);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ShowStackToolWindow");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool _p_open;

            _p_open = lua_toboolean(L, 1) != 0;

            bool* p_open = &_p_open;

            ImGui_ShowAboutWindow(p_open);

            lua_pushboolean(L, _p_open);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ShowAboutWindow");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            bool ret = ImGui_ShowStyleSelector(label);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ShowStyleSelector");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            ImGui_ShowFontSelector(label);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ShowFontSelector");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_ShowUserGuide();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ShowUserGuide");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* ret = ImGui_GetVersion();

            lua_pushstring(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetVersion");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* name;

            name = luaL_checkstring(L, 1);

            bool _p_open;

            _p_open = lua_toboolean(L, 2) != 0;

            bool* p_open = &_p_open;

            int flags;

            flags = luaL_optinteger(L, 3, 0);

            bool ret = ImGui_Begin(name, p_open, flags);

            lua_pushboolean(L, ret);

            lua_pushboolean(L, _p_open);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "Begin");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_End();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "End");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* str_id;

            str_id = luaL_checkstring(L, 1);

            ImVec2 size;

            if (lua_isnoneornil(L, 2))
            {
                size = ImVec2{ 0, 0 };
            }
            else
            {
                size.x = luaL_checknumber(L, 2);
                size.y = luaL_checknumber(L, 2 + 1);
            }

            bool border;

            border = lua_isnoneornil(L, 4) ? lua_toboolean(L, 4) : false;

            int flags;

            flags = luaL_optinteger(L, 5, 0);

            bool ret = ImGui_BeginChild(str_id, size, border, flags);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginChild");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_EndChild();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "EndChild");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_IsWindowAppearing();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsWindowAppearing");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_IsWindowCollapsed();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsWindowCollapsed");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int flags;

            flags = luaL_optinteger(L, 1, 0);

            bool ret = ImGui_IsWindowFocused(flags);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsWindowFocused");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int flags;

            flags = luaL_optinteger(L, 1, 0);

            bool ret = ImGui_IsWindowHovered(flags);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsWindowHovered");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float ret = ImGui_GetWindowDpiScale();

            lua_pushnumber(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetWindowDpiScale");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 ret = ImGui_GetWindowPos();

            lua_pushnumber(L, ret.x);
            lua_pushnumber(L, ret.y);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetWindowPos");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 ret = ImGui_GetWindowSize();

            lua_pushnumber(L, ret.x);
            lua_pushnumber(L, ret.y);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetWindowSize");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float ret = ImGui_GetWindowWidth();

            lua_pushnumber(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetWindowWidth");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float ret = ImGui_GetWindowHeight();

            lua_pushnumber(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetWindowHeight");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 pos;

            pos.x = luaL_checknumber(L, 1);
            pos.y = luaL_checknumber(L, 1 + 1);

            int cond;

            cond = luaL_optinteger(L, 3, 0);

            ImGui_SetNextWindowPos(pos, cond);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetNextWindowPos");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 pos;

            pos.x = luaL_checknumber(L, 1);
            pos.y = luaL_checknumber(L, 1 + 1);

            int cond;

            cond = luaL_optinteger(L, 3, 0);

            ImVec2 pivot;

            if (lua_isnoneornil(L, 4))
            {
                pivot = ImVec2{ 0, 0 };
            }
            else
            {
                pivot.x = luaL_checknumber(L, 4);
                pivot.y = luaL_checknumber(L, 4 + 1);
            }

            ImGui_SetNextWindowPosEx(pos, cond, pivot);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetNextWindowPosEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 size;

            size.x = luaL_checknumber(L, 1);
            size.y = luaL_checknumber(L, 1 + 1);

            int cond;

            cond = luaL_optinteger(L, 3, 0);

            ImGui_SetNextWindowSize(size, cond);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetNextWindowSize");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 size;

            size.x = luaL_checknumber(L, 1);
            size.y = luaL_checknumber(L, 1 + 1);

            ImGui_SetNextWindowContentSize(size);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetNextWindowContentSize");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool collapsed;

            collapsed = lua_toboolean(L, 1) != 0;

            int cond;

            cond = luaL_optinteger(L, 2, 0);

            ImGui_SetNextWindowCollapsed(collapsed, cond);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetNextWindowCollapsed");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_SetNextWindowFocus();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetNextWindowFocus");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float alpha;

            alpha = luaL_checknumber(L, 1);

            ImGui_SetNextWindowBgAlpha(alpha);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetNextWindowBgAlpha");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 pos;

            pos.x = luaL_checknumber(L, 1);
            pos.y = luaL_checknumber(L, 1 + 1);

            int cond;

            cond = luaL_optinteger(L, 3, 0);

            ImGui_SetWindowPos(pos, cond);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetWindowPos");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 size;

            size.x = luaL_checknumber(L, 1);
            size.y = luaL_checknumber(L, 1 + 1);

            int cond;

            cond = luaL_optinteger(L, 3, 0);

            ImGui_SetWindowSize(size, cond);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetWindowSize");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool collapsed;

            collapsed = lua_toboolean(L, 1) != 0;

            int cond;

            cond = luaL_optinteger(L, 2, 0);

            ImGui_SetWindowCollapsed(collapsed, cond);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetWindowCollapsed");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_SetWindowFocus();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetWindowFocus");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float scale;

            scale = luaL_checknumber(L, 1);

            ImGui_SetWindowFontScale(scale);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetWindowFontScale");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* name;

            name = luaL_checkstring(L, 1);

            ImVec2 pos;

            pos.x = luaL_checknumber(L, 2);
            pos.y = luaL_checknumber(L, 2 + 1);

            int cond;

            cond = luaL_optinteger(L, 4, 0);

            ImGui_SetWindowPosStr(name, pos, cond);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetWindowPosStr");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* name;

            name = luaL_checkstring(L, 1);

            ImVec2 size;

            size.x = luaL_checknumber(L, 2);
            size.y = luaL_checknumber(L, 2 + 1);

            int cond;

            cond = luaL_optinteger(L, 4, 0);

            ImGui_SetWindowSizeStr(name, size, cond);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetWindowSizeStr");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* name;

            name = luaL_checkstring(L, 1);

            bool collapsed;

            collapsed = lua_toboolean(L, 2) != 0;

            int cond;

            cond = luaL_optinteger(L, 3, 0);

            ImGui_SetWindowCollapsedStr(name, collapsed, cond);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetWindowCollapsedStr");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* name;

            name = luaL_checkstring(L, 1);

            ImGui_SetWindowFocusStr(name);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetWindowFocusStr");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 ret = ImGui_GetContentRegionAvail();

            lua_pushnumber(L, ret.x);
            lua_pushnumber(L, ret.y);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetContentRegionAvail");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 ret = ImGui_GetContentRegionMax();

            lua_pushnumber(L, ret.x);
            lua_pushnumber(L, ret.y);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetContentRegionMax");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 ret = ImGui_GetWindowContentRegionMin();

            lua_pushnumber(L, ret.x);
            lua_pushnumber(L, ret.y);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetWindowContentRegionMin");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 ret = ImGui_GetWindowContentRegionMax();

            lua_pushnumber(L, ret.x);
            lua_pushnumber(L, ret.y);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetWindowContentRegionMax");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float ret = ImGui_GetScrollX();

            lua_pushnumber(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetScrollX");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float ret = ImGui_GetScrollY();

            lua_pushnumber(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetScrollY");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float scroll_x;

            scroll_x = luaL_checknumber(L, 1);

            ImGui_SetScrollX(scroll_x);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetScrollX");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float scroll_y;

            scroll_y = luaL_checknumber(L, 1);

            ImGui_SetScrollY(scroll_y);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetScrollY");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float ret = ImGui_GetScrollMaxX();

            lua_pushnumber(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetScrollMaxX");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float ret = ImGui_GetScrollMaxY();

            lua_pushnumber(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetScrollMaxY");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float center_x_ratio;

            center_x_ratio = luaL_optnumber(L, 1, 0.5f);

            ImGui_SetScrollHereX(center_x_ratio);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetScrollHereX");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float center_y_ratio;

            center_y_ratio = luaL_optnumber(L, 1, 0.5f);

            ImGui_SetScrollHereY(center_y_ratio);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetScrollHereY");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float local_x;

            local_x = luaL_checknumber(L, 1);

            float center_x_ratio;

            center_x_ratio = luaL_optnumber(L, 2, 0.5f);

            ImGui_SetScrollFromPosX(local_x, center_x_ratio);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetScrollFromPosX");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float local_y;

            local_y = luaL_checknumber(L, 1);

            float center_y_ratio;

            center_y_ratio = luaL_optnumber(L, 2, 0.5f);

            ImGui_SetScrollFromPosY(local_y, center_y_ratio);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetScrollFromPosY");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_PopFont();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PopFont");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int idx;

            idx = luaL_checkinteger(L, 1);

            ImVec4 col;

            col.x = luaL_checknumber(L, 2);
            col.y = luaL_checknumber(L, 2 + 1);
            col.z = luaL_checknumber(L, 2 + 2);
            col.w = luaL_checknumber(L, 2 + 3);

            ImGui_PushStyleColorImVec4(idx, col);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PushStyleColorImVec4");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_PopStyleColor();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PopStyleColor");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int count;

            count = luaL_optinteger(L, 1, 1);

            ImGui_PopStyleColorEx(count);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PopStyleColorEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int idx;

            idx = luaL_checkinteger(L, 1);

            float val;

            val = luaL_checknumber(L, 2);

            ImGui_PushStyleVar(idx, val);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PushStyleVar");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int idx;

            idx = luaL_checkinteger(L, 1);

            ImVec2 val;

            val.x = luaL_checknumber(L, 2);
            val.y = luaL_checknumber(L, 2 + 1);

            ImGui_PushStyleVarImVec2(idx, val);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PushStyleVarImVec2");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_PopStyleVar();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PopStyleVar");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int count;

            count = luaL_optinteger(L, 1, 1);

            ImGui_PopStyleVarEx(count);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PopStyleVarEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool allow_keyboard_focus;

            allow_keyboard_focus = lua_toboolean(L, 1) != 0;

            ImGui_PushAllowKeyboardFocus(allow_keyboard_focus);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PushAllowKeyboardFocus");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_PopAllowKeyboardFocus();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PopAllowKeyboardFocus");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool repeat;

            repeat = lua_toboolean(L, 1) != 0;

            ImGui_PushButtonRepeat(repeat);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PushButtonRepeat");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_PopButtonRepeat();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PopButtonRepeat");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float item_width;

            item_width = luaL_checknumber(L, 1);

            ImGui_PushItemWidth(item_width);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PushItemWidth");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_PopItemWidth();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PopItemWidth");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float item_width;

            item_width = luaL_checknumber(L, 1);

            ImGui_SetNextItemWidth(item_width);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetNextItemWidth");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float ret = ImGui_CalcItemWidth();

            lua_pushnumber(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "CalcItemWidth");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float wrap_local_pos_x;

            wrap_local_pos_x = luaL_optnumber(L, 1, 0.0f);

            ImGui_PushTextWrapPos(wrap_local_pos_x);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PushTextWrapPos");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_PopTextWrapPos();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PopTextWrapPos");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float ret = ImGui_GetFontSize();

            lua_pushnumber(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetFontSize");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 ret = ImGui_GetFontTexUvWhitePixel();

            lua_pushnumber(L, ret.x);
            lua_pushnumber(L, ret.y);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetFontTexUvWhitePixel");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_Separator();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "Separator");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_SameLine();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SameLine");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float offset_from_start_x;

            offset_from_start_x = luaL_optnumber(L, 1, 0.0f);

            float spacing;

            spacing = luaL_optnumber(L, 2, -1.0f);

            ImGui_SameLineEx(offset_from_start_x, spacing);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SameLineEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_NewLine();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "NewLine");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_Spacing();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "Spacing");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 size;

            size.x = luaL_checknumber(L, 1);
            size.y = luaL_checknumber(L, 1 + 1);

            ImGui_Dummy(size);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "Dummy");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_Indent();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "Indent");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float indent_w;

            indent_w = luaL_optnumber(L, 1, 0.0f);

            ImGui_IndentEx(indent_w);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IndentEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_Unindent();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "Unindent");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float indent_w;

            indent_w = luaL_optnumber(L, 1, 0.0f);

            ImGui_UnindentEx(indent_w);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "UnindentEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_BeginGroup();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginGroup");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_EndGroup();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "EndGroup");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 ret = ImGui_GetCursorPos();

            lua_pushnumber(L, ret.x);
            lua_pushnumber(L, ret.y);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetCursorPos");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float ret = ImGui_GetCursorPosX();

            lua_pushnumber(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetCursorPosX");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float ret = ImGui_GetCursorPosY();

            lua_pushnumber(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetCursorPosY");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 local_pos;

            local_pos.x = luaL_checknumber(L, 1);
            local_pos.y = luaL_checknumber(L, 1 + 1);

            ImGui_SetCursorPos(local_pos);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetCursorPos");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float local_x;

            local_x = luaL_checknumber(L, 1);

            ImGui_SetCursorPosX(local_x);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetCursorPosX");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float local_y;

            local_y = luaL_checknumber(L, 1);

            ImGui_SetCursorPosY(local_y);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetCursorPosY");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 ret = ImGui_GetCursorStartPos();

            lua_pushnumber(L, ret.x);
            lua_pushnumber(L, ret.y);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetCursorStartPos");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 ret = ImGui_GetCursorScreenPos();

            lua_pushnumber(L, ret.x);
            lua_pushnumber(L, ret.y);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetCursorScreenPos");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 pos;

            pos.x = luaL_checknumber(L, 1);
            pos.y = luaL_checknumber(L, 1 + 1);

            ImGui_SetCursorScreenPos(pos);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetCursorScreenPos");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_AlignTextToFramePadding();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "AlignTextToFramePadding");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float ret = ImGui_GetTextLineHeight();

            lua_pushnumber(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetTextLineHeight");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float ret = ImGui_GetTextLineHeightWithSpacing();

            lua_pushnumber(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetTextLineHeightWithSpacing");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float ret = ImGui_GetFrameHeight();

            lua_pushnumber(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetFrameHeight");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float ret = ImGui_GetFrameHeightWithSpacing();

            lua_pushnumber(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetFrameHeightWithSpacing");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* str_id;

            str_id = luaL_checkstring(L, 1);

            ImGui_PushID(str_id);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PushID");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* str_id_begin;

            str_id_begin = luaL_checkstring(L, 1);

            const char* str_id_end;

            str_id_end = luaL_checkstring(L, 2);

            ImGui_PushIDStr(str_id_begin, str_id_end);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PushIDStr");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int int_id;

            int_id = luaL_checkinteger(L, 1);

            ImGui_PushIDInt(int_id);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PushIDInt");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_PopID();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PopID");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* text;

            text = luaL_checkstring(L, 1);

            ImGui_TextUnformatted(text);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TextUnformatted");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* text;

            text = luaL_checkstring(L, 1);

            const char* text_end;

            text_end = luaL_optstring(L, 2, NULL);

            ImGui_TextUnformattedEx(text, text_end);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TextUnformattedEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* fmt;

            fmt = luaL_checkstring(L, 1);

            ImGui_Text(fmt);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "Text");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec4 col;

            col.x = luaL_checknumber(L, 1);
            col.y = luaL_checknumber(L, 1 + 1);
            col.z = luaL_checknumber(L, 1 + 2);
            col.w = luaL_checknumber(L, 1 + 3);

            const char* fmt;

            fmt = luaL_checkstring(L, 5);

            ImGui_TextColored(col, fmt);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TextColored");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* fmt;

            fmt = luaL_checkstring(L, 1);

            ImGui_TextDisabled(fmt);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TextDisabled");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* fmt;

            fmt = luaL_checkstring(L, 1);

            ImGui_TextWrapped(fmt);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TextWrapped");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            const char* fmt;

            fmt = luaL_checkstring(L, 2);

            ImGui_LabelText(label, fmt);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "LabelText");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* fmt;

            fmt = luaL_checkstring(L, 1);

            ImGui_BulletText(fmt);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BulletText");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            bool ret = ImGui_Button(label);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "Button");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            ImVec2 size;

            if (lua_isnoneornil(L, 2))
            {
                size = ImVec2{ 0, 0 };
            }
            else
            {
                size.x = luaL_checknumber(L, 2);
                size.y = luaL_checknumber(L, 2 + 1);
            }

            bool ret = ImGui_ButtonEx(label, size);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ButtonEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            bool ret = ImGui_SmallButton(label);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SmallButton");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* str_id;

            str_id = luaL_checkstring(L, 1);

            ImVec2 size;

            size.x = luaL_checknumber(L, 2);
            size.y = luaL_checknumber(L, 2 + 1);

            int flags;

            flags = luaL_optinteger(L, 4, 0);

            bool ret = ImGui_InvisibleButton(str_id, size, flags);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "InvisibleButton");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* str_id;

            str_id = luaL_checkstring(L, 1);

            int dir;

            dir = luaL_checkinteger(L, 2);

            bool ret = ImGui_ArrowButton(str_id, dir);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ArrowButton");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            bool _v;

            _v = lua_toboolean(L, 2) != 0;

            bool* v = &_v;

            bool ret = ImGui_Checkbox(label, v);

            lua_pushboolean(L, ret);

            lua_pushboolean(L, _v);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "Checkbox");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int _flags;

            _flags = luaL_checkinteger(L, 2);

            int* flags = &_flags;

            int flags_value;

            flags_value = luaL_checkinteger(L, 3);

            bool ret = ImGui_CheckboxFlagsIntPtr(label, flags, flags_value);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, _flags);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "CheckboxFlagsIntPtr");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            bool active;

            active = lua_toboolean(L, 2) != 0;

            bool ret = ImGui_RadioButton(label, active);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "RadioButton");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int _v;

            _v = luaL_checkinteger(L, 2);

            int* v = &_v;

            int v_button;

            v_button = luaL_checkinteger(L, 3);

            bool ret = ImGui_RadioButtonIntPtr(label, v, v_button);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, _v);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "RadioButtonIntPtr");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float fraction;

            fraction = luaL_checknumber(L, 1);

            ImVec2 size_arg;

            if (lua_isnoneornil(L, 2))
            {
                size_arg = ImVec2{ -FLT_MIN, 0 };
            }
            else
            {
                size_arg.x = luaL_checknumber(L, 2);
                size_arg.y = luaL_checknumber(L, 2 + 1);
            }

            const char* overlay;

            overlay = luaL_optstring(L, 4, NULL);

            ImGui_ProgressBar(fraction, size_arg, overlay);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ProgressBar");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_Bullet();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "Bullet");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            const char* preview_value;

            preview_value = luaL_checkstring(L, 2);

            int flags;

            flags = luaL_optinteger(L, 3, 0);

            bool ret = ImGui_BeginCombo(label, preview_value, flags);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginCombo");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_EndCombo();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "EndCombo");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int _current_item;

            _current_item = luaL_checkinteger(L, 2);

            int* current_item = &_current_item;

            const char* items_separated_by_zeros;

            items_separated_by_zeros = luaL_checkstring(L, 3);

            bool ret = ImGui_Combo(label, current_item, items_separated_by_zeros);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, _current_item);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "Combo");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int _current_item;

            _current_item = luaL_checkinteger(L, 2);

            int* current_item = &_current_item;

            const char* items_separated_by_zeros;

            items_separated_by_zeros = luaL_checkstring(L, 3);

            int popup_max_height_in_items;

            popup_max_height_in_items = luaL_optinteger(L, 4, -1);

            bool ret = ImGui_ComboEx(label, current_item, items_separated_by_zeros, popup_max_height_in_items);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, _current_item);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ComboEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int _current_item;

            _current_item = luaL_checkinteger(L, 2);

            int* current_item = &_current_item;

            if (!lua_isfunction(L, 3))
                luaL_error(L, "argument items_getter must be a function");
            bool (*items_getter)(void* data, int idx, const char** out_text) = +[](void* data, int idx, const char** out_text) {
                lua_State* L = (lua_State*)data;
                lua_pushvalue(L, 3);

                lua_pushinteger(L, idx);

                bool ret = {};
                if (lua_pcall(L, 1, 2, 0) != LUA_OK)
                {
                    lua_getglobal(L, "skr");
                    lua_getfield(L, -1, "log_error");
                    lua_pushvalue(L, -3);
                    lua_call(L, 1, 0);
                    lua_pop(L, 2);
                    return ret;
                }

                ret = lua_toboolean(L, -2) != 0;

                *out_text = luaL_checkstring(L, -1);

                lua_pop(L, 2);
                return ret;
            };
            void* data = L;

            int items_count;

            items_count = luaL_checkinteger(L, 4);

            bool ret = ImGui_ComboCallback(label, current_item, items_getter, data, items_count);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, _current_item);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ComboCallback");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int _current_item;

            _current_item = luaL_checkinteger(L, 2);

            int* current_item = &_current_item;

            if (!lua_isfunction(L, 3))
                luaL_error(L, "argument items_getter must be a function");
            bool (*items_getter)(void* data, int idx, const char** out_text) = +[](void* data, int idx, const char** out_text) {
                lua_State* L = (lua_State*)data;
                lua_pushvalue(L, 3);

                lua_pushinteger(L, idx);

                bool ret = {};
                if (lua_pcall(L, 1, 2, 0) != LUA_OK)
                {
                    lua_getglobal(L, "skr");
                    lua_getfield(L, -1, "log_error");
                    lua_pushvalue(L, -3);
                    lua_call(L, 1, 0);
                    lua_pop(L, 2);
                    return ret;
                }

                ret = lua_toboolean(L, -2) != 0;

                *out_text = luaL_checkstring(L, -1);

                lua_pop(L, 2);
                return ret;
            };
            void* data = L;

            int items_count;

            items_count = luaL_checkinteger(L, 4);

            int popup_max_height_in_items;

            popup_max_height_in_items = luaL_optinteger(L, 5, -1);

            bool ret = ImGui_ComboCallbackEx(label, current_item, items_getter, data, items_count, popup_max_height_in_items);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, _current_item);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ComboCallbackEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float _v;

            _v = luaL_checknumber(L, 2);

            float* v = &_v;

            bool ret = ImGui_DragFloat(label, v);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, _v);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "DragFloat");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float _v;

            _v = luaL_checknumber(L, 2);

            float* v = &_v;

            float v_speed;

            v_speed = luaL_optnumber(L, 3, 1.0f);

            float v_min;

            v_min = luaL_optnumber(L, 4, 0.0f);

            float v_max;

            v_max = luaL_optnumber(L, 5, 0.0f);

            const char* format;

            format = luaL_optstring(L, 6, "%.3f");

            int flags;

            flags = luaL_optinteger(L, 7, 0);

            bool ret = ImGui_DragFloatEx(label, v, v_speed, v_min, v_max, format, flags);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, _v);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "DragFloatEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float v[2];

            v[0] = luaL_checknumber(L, 2);

            v[1] = luaL_checknumber(L, 3);

            bool ret = ImGui_DragFloat2(label, v);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, v[0]);

            lua_pushnumber(L, v[1]);

            return 3;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "DragFloat2");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float v[2];

            v[0] = luaL_checknumber(L, 2);

            v[1] = luaL_checknumber(L, 3);

            float v_speed;

            v_speed = luaL_optnumber(L, 4, 1.0f);

            float v_min;

            v_min = luaL_optnumber(L, 5, 0.0f);

            float v_max;

            v_max = luaL_optnumber(L, 6, 0.0f);

            const char* format;

            format = luaL_optstring(L, 7, "%.3f");

            int flags;

            flags = luaL_optinteger(L, 8, 0);

            bool ret = ImGui_DragFloat2Ex(label, v, v_speed, v_min, v_max, format, flags);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, v[0]);

            lua_pushnumber(L, v[1]);

            return 3;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "DragFloat2Ex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float v[3];

            v[0] = luaL_checknumber(L, 2);

            v[1] = luaL_checknumber(L, 3);

            v[2] = luaL_checknumber(L, 4);

            bool ret = ImGui_DragFloat3(label, v);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, v[0]);

            lua_pushnumber(L, v[1]);

            lua_pushnumber(L, v[2]);

            return 4;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "DragFloat3");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float v[3];

            v[0] = luaL_checknumber(L, 2);

            v[1] = luaL_checknumber(L, 3);

            v[2] = luaL_checknumber(L, 4);

            float v_speed;

            v_speed = luaL_optnumber(L, 5, 1.0f);

            float v_min;

            v_min = luaL_optnumber(L, 6, 0.0f);

            float v_max;

            v_max = luaL_optnumber(L, 7, 0.0f);

            const char* format;

            format = luaL_optstring(L, 8, "%.3f");

            int flags;

            flags = luaL_optinteger(L, 9, 0);

            bool ret = ImGui_DragFloat3Ex(label, v, v_speed, v_min, v_max, format, flags);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, v[0]);

            lua_pushnumber(L, v[1]);

            lua_pushnumber(L, v[2]);

            return 4;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "DragFloat3Ex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float v[4];

            v[0] = luaL_checknumber(L, 2);

            v[1] = luaL_checknumber(L, 3);

            v[2] = luaL_checknumber(L, 4);

            v[3] = luaL_checknumber(L, 5);

            bool ret = ImGui_DragFloat4(label, v);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, v[0]);

            lua_pushnumber(L, v[1]);

            lua_pushnumber(L, v[2]);

            lua_pushnumber(L, v[3]);

            return 5;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "DragFloat4");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float v[4];

            v[0] = luaL_checknumber(L, 2);

            v[1] = luaL_checknumber(L, 3);

            v[2] = luaL_checknumber(L, 4);

            v[3] = luaL_checknumber(L, 5);

            float v_speed;

            v_speed = luaL_optnumber(L, 6, 1.0f);

            float v_min;

            v_min = luaL_optnumber(L, 7, 0.0f);

            float v_max;

            v_max = luaL_optnumber(L, 8, 0.0f);

            const char* format;

            format = luaL_optstring(L, 9, "%.3f");

            int flags;

            flags = luaL_optinteger(L, 10, 0);

            bool ret = ImGui_DragFloat4Ex(label, v, v_speed, v_min, v_max, format, flags);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, v[0]);

            lua_pushnumber(L, v[1]);

            lua_pushnumber(L, v[2]);

            lua_pushnumber(L, v[3]);

            return 5;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "DragFloat4Ex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float _v_current_min;

            _v_current_min = luaL_checknumber(L, 2);

            float* v_current_min = &_v_current_min;

            float _v_current_max;

            _v_current_max = luaL_checknumber(L, 3);

            float* v_current_max = &_v_current_max;

            bool ret = ImGui_DragFloatRange2(label, v_current_min, v_current_max);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, _v_current_min);

            lua_pushnumber(L, _v_current_max);

            return 3;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "DragFloatRange2");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float _v_current_min;

            _v_current_min = luaL_checknumber(L, 2);

            float* v_current_min = &_v_current_min;

            float _v_current_max;

            _v_current_max = luaL_checknumber(L, 3);

            float* v_current_max = &_v_current_max;

            float v_speed;

            v_speed = luaL_optnumber(L, 4, 1.0f);

            float v_min;

            v_min = luaL_optnumber(L, 5, 0.0f);

            float v_max;

            v_max = luaL_optnumber(L, 6, 0.0f);

            const char* format;

            format = luaL_optstring(L, 7, "%.3f");

            const char* format_max;

            format_max = luaL_optstring(L, 8, NULL);

            int flags;

            flags = luaL_optinteger(L, 9, 0);

            bool ret = ImGui_DragFloatRange2Ex(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, flags);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, _v_current_min);

            lua_pushnumber(L, _v_current_max);

            return 3;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "DragFloatRange2Ex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int _v;

            _v = luaL_checkinteger(L, 2);

            int* v = &_v;

            bool ret = ImGui_DragInt(label, v);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, _v);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "DragInt");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int _v;

            _v = luaL_checkinteger(L, 2);

            int* v = &_v;

            float v_speed;

            v_speed = luaL_optnumber(L, 3, 1.0f);

            int v_min;

            v_min = luaL_optinteger(L, 4, 0);

            int v_max;

            v_max = luaL_optinteger(L, 5, 0);

            const char* format;

            format = luaL_optstring(L, 6, "%d");

            int flags;

            flags = luaL_optinteger(L, 7, 0);

            bool ret = ImGui_DragIntEx(label, v, v_speed, v_min, v_max, format, flags);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, _v);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "DragIntEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int v[2];

            v[0] = luaL_checkinteger(L, 2);

            v[1] = luaL_checkinteger(L, 3);

            bool ret = ImGui_DragInt2(label, v);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, v[0]);

            lua_pushinteger(L, v[1]);

            return 3;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "DragInt2");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int v[2];

            v[0] = luaL_checkinteger(L, 2);

            v[1] = luaL_checkinteger(L, 3);

            float v_speed;

            v_speed = luaL_optnumber(L, 4, 1.0f);

            int v_min;

            v_min = luaL_optinteger(L, 5, 0);

            int v_max;

            v_max = luaL_optinteger(L, 6, 0);

            const char* format;

            format = luaL_optstring(L, 7, "%d");

            int flags;

            flags = luaL_optinteger(L, 8, 0);

            bool ret = ImGui_DragInt2Ex(label, v, v_speed, v_min, v_max, format, flags);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, v[0]);

            lua_pushinteger(L, v[1]);

            return 3;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "DragInt2Ex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int v[3];

            v[0] = luaL_checkinteger(L, 2);

            v[1] = luaL_checkinteger(L, 3);

            v[2] = luaL_checkinteger(L, 4);

            bool ret = ImGui_DragInt3(label, v);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, v[0]);

            lua_pushinteger(L, v[1]);

            lua_pushinteger(L, v[2]);

            return 4;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "DragInt3");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int v[3];

            v[0] = luaL_checkinteger(L, 2);

            v[1] = luaL_checkinteger(L, 3);

            v[2] = luaL_checkinteger(L, 4);

            float v_speed;

            v_speed = luaL_optnumber(L, 5, 1.0f);

            int v_min;

            v_min = luaL_optinteger(L, 6, 0);

            int v_max;

            v_max = luaL_optinteger(L, 7, 0);

            const char* format;

            format = luaL_optstring(L, 8, "%d");

            int flags;

            flags = luaL_optinteger(L, 9, 0);

            bool ret = ImGui_DragInt3Ex(label, v, v_speed, v_min, v_max, format, flags);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, v[0]);

            lua_pushinteger(L, v[1]);

            lua_pushinteger(L, v[2]);

            return 4;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "DragInt3Ex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int v[4];

            v[0] = luaL_checkinteger(L, 2);

            v[1] = luaL_checkinteger(L, 3);

            v[2] = luaL_checkinteger(L, 4);

            v[3] = luaL_checkinteger(L, 5);

            bool ret = ImGui_DragInt4(label, v);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, v[0]);

            lua_pushinteger(L, v[1]);

            lua_pushinteger(L, v[2]);

            lua_pushinteger(L, v[3]);

            return 5;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "DragInt4");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int v[4];

            v[0] = luaL_checkinteger(L, 2);

            v[1] = luaL_checkinteger(L, 3);

            v[2] = luaL_checkinteger(L, 4);

            v[3] = luaL_checkinteger(L, 5);

            float v_speed;

            v_speed = luaL_optnumber(L, 6, 1.0f);

            int v_min;

            v_min = luaL_optinteger(L, 7, 0);

            int v_max;

            v_max = luaL_optinteger(L, 8, 0);

            const char* format;

            format = luaL_optstring(L, 9, "%d");

            int flags;

            flags = luaL_optinteger(L, 10, 0);

            bool ret = ImGui_DragInt4Ex(label, v, v_speed, v_min, v_max, format, flags);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, v[0]);

            lua_pushinteger(L, v[1]);

            lua_pushinteger(L, v[2]);

            lua_pushinteger(L, v[3]);

            return 5;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "DragInt4Ex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int _v_current_min;

            _v_current_min = luaL_checkinteger(L, 2);

            int* v_current_min = &_v_current_min;

            int _v_current_max;

            _v_current_max = luaL_checkinteger(L, 3);

            int* v_current_max = &_v_current_max;

            bool ret = ImGui_DragIntRange2(label, v_current_min, v_current_max);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, _v_current_min);

            lua_pushinteger(L, _v_current_max);

            return 3;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "DragIntRange2");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int _v_current_min;

            _v_current_min = luaL_checkinteger(L, 2);

            int* v_current_min = &_v_current_min;

            int _v_current_max;

            _v_current_max = luaL_checkinteger(L, 3);

            int* v_current_max = &_v_current_max;

            float v_speed;

            v_speed = luaL_optnumber(L, 4, 1.0f);

            int v_min;

            v_min = luaL_optinteger(L, 5, 0);

            int v_max;

            v_max = luaL_optinteger(L, 6, 0);

            const char* format;

            format = luaL_optstring(L, 7, "%d");

            const char* format_max;

            format_max = luaL_optstring(L, 8, NULL);

            int flags;

            flags = luaL_optinteger(L, 9, 0);

            bool ret = ImGui_DragIntRange2Ex(label, v_current_min, v_current_max, v_speed, v_min, v_max, format, format_max, flags);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, _v_current_min);

            lua_pushinteger(L, _v_current_max);

            return 3;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "DragIntRange2Ex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float _v;

            _v = luaL_checknumber(L, 2);

            float* v = &_v;

            float v_min;

            v_min = luaL_checknumber(L, 3);

            float v_max;

            v_max = luaL_checknumber(L, 4);

            bool ret = ImGui_SliderFloat(label, v, v_min, v_max);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, _v);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SliderFloat");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float _v;

            _v = luaL_checknumber(L, 2);

            float* v = &_v;

            float v_min;

            v_min = luaL_checknumber(L, 3);

            float v_max;

            v_max = luaL_checknumber(L, 4);

            const char* format;

            format = luaL_optstring(L, 5, "%.3f");

            int flags;

            flags = luaL_optinteger(L, 6, 0);

            bool ret = ImGui_SliderFloatEx(label, v, v_min, v_max, format, flags);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, _v);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SliderFloatEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float v[2];

            v[0] = luaL_checknumber(L, 2);

            v[1] = luaL_checknumber(L, 3);

            float v_min;

            v_min = luaL_checknumber(L, 4);

            float v_max;

            v_max = luaL_checknumber(L, 5);

            bool ret = ImGui_SliderFloat2(label, v, v_min, v_max);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, v[0]);

            lua_pushnumber(L, v[1]);

            return 3;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SliderFloat2");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float v[2];

            v[0] = luaL_checknumber(L, 2);

            v[1] = luaL_checknumber(L, 3);

            float v_min;

            v_min = luaL_checknumber(L, 4);

            float v_max;

            v_max = luaL_checknumber(L, 5);

            const char* format;

            format = luaL_optstring(L, 6, "%.3f");

            int flags;

            flags = luaL_optinteger(L, 7, 0);

            bool ret = ImGui_SliderFloat2Ex(label, v, v_min, v_max, format, flags);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, v[0]);

            lua_pushnumber(L, v[1]);

            return 3;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SliderFloat2Ex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float v[3];

            v[0] = luaL_checknumber(L, 2);

            v[1] = luaL_checknumber(L, 3);

            v[2] = luaL_checknumber(L, 4);

            float v_min;

            v_min = luaL_checknumber(L, 5);

            float v_max;

            v_max = luaL_checknumber(L, 6);

            bool ret = ImGui_SliderFloat3(label, v, v_min, v_max);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, v[0]);

            lua_pushnumber(L, v[1]);

            lua_pushnumber(L, v[2]);

            return 4;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SliderFloat3");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float v[3];

            v[0] = luaL_checknumber(L, 2);

            v[1] = luaL_checknumber(L, 3);

            v[2] = luaL_checknumber(L, 4);

            float v_min;

            v_min = luaL_checknumber(L, 5);

            float v_max;

            v_max = luaL_checknumber(L, 6);

            const char* format;

            format = luaL_optstring(L, 7, "%.3f");

            int flags;

            flags = luaL_optinteger(L, 8, 0);

            bool ret = ImGui_SliderFloat3Ex(label, v, v_min, v_max, format, flags);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, v[0]);

            lua_pushnumber(L, v[1]);

            lua_pushnumber(L, v[2]);

            return 4;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SliderFloat3Ex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float v[4];

            v[0] = luaL_checknumber(L, 2);

            v[1] = luaL_checknumber(L, 3);

            v[2] = luaL_checknumber(L, 4);

            v[3] = luaL_checknumber(L, 5);

            float v_min;

            v_min = luaL_checknumber(L, 6);

            float v_max;

            v_max = luaL_checknumber(L, 7);

            bool ret = ImGui_SliderFloat4(label, v, v_min, v_max);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, v[0]);

            lua_pushnumber(L, v[1]);

            lua_pushnumber(L, v[2]);

            lua_pushnumber(L, v[3]);

            return 5;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SliderFloat4");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float v[4];

            v[0] = luaL_checknumber(L, 2);

            v[1] = luaL_checknumber(L, 3);

            v[2] = luaL_checknumber(L, 4);

            v[3] = luaL_checknumber(L, 5);

            float v_min;

            v_min = luaL_checknumber(L, 6);

            float v_max;

            v_max = luaL_checknumber(L, 7);

            const char* format;

            format = luaL_optstring(L, 8, "%.3f");

            int flags;

            flags = luaL_optinteger(L, 9, 0);

            bool ret = ImGui_SliderFloat4Ex(label, v, v_min, v_max, format, flags);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, v[0]);

            lua_pushnumber(L, v[1]);

            lua_pushnumber(L, v[2]);

            lua_pushnumber(L, v[3]);

            return 5;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SliderFloat4Ex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float _v_rad;

            _v_rad = luaL_checknumber(L, 2);

            float* v_rad = &_v_rad;

            bool ret = ImGui_SliderAngle(label, v_rad);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, _v_rad);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SliderAngle");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float _v_rad;

            _v_rad = luaL_checknumber(L, 2);

            float* v_rad = &_v_rad;

            float v_degrees_min;

            v_degrees_min = luaL_optnumber(L, 3, -360.0f);

            float v_degrees_max;

            v_degrees_max = luaL_optnumber(L, 4, +360.0f);

            const char* format;

            format = luaL_optstring(L, 5, "%.0f deg");

            int flags;

            flags = luaL_optinteger(L, 6, 0);

            bool ret = ImGui_SliderAngleEx(label, v_rad, v_degrees_min, v_degrees_max, format, flags);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, _v_rad);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SliderAngleEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int _v;

            _v = luaL_checkinteger(L, 2);

            int* v = &_v;

            int v_min;

            v_min = luaL_checkinteger(L, 3);

            int v_max;

            v_max = luaL_checkinteger(L, 4);

            bool ret = ImGui_SliderInt(label, v, v_min, v_max);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, _v);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SliderInt");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int _v;

            _v = luaL_checkinteger(L, 2);

            int* v = &_v;

            int v_min;

            v_min = luaL_checkinteger(L, 3);

            int v_max;

            v_max = luaL_checkinteger(L, 4);

            const char* format;

            format = luaL_optstring(L, 5, "%d");

            int flags;

            flags = luaL_optinteger(L, 6, 0);

            bool ret = ImGui_SliderIntEx(label, v, v_min, v_max, format, flags);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, _v);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SliderIntEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int v[2];

            v[0] = luaL_checkinteger(L, 2);

            v[1] = luaL_checkinteger(L, 3);

            int v_min;

            v_min = luaL_checkinteger(L, 4);

            int v_max;

            v_max = luaL_checkinteger(L, 5);

            bool ret = ImGui_SliderInt2(label, v, v_min, v_max);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, v[0]);

            lua_pushinteger(L, v[1]);

            return 3;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SliderInt2");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int v[2];

            v[0] = luaL_checkinteger(L, 2);

            v[1] = luaL_checkinteger(L, 3);

            int v_min;

            v_min = luaL_checkinteger(L, 4);

            int v_max;

            v_max = luaL_checkinteger(L, 5);

            const char* format;

            format = luaL_optstring(L, 6, "%d");

            int flags;

            flags = luaL_optinteger(L, 7, 0);

            bool ret = ImGui_SliderInt2Ex(label, v, v_min, v_max, format, flags);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, v[0]);

            lua_pushinteger(L, v[1]);

            return 3;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SliderInt2Ex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int v[3];

            v[0] = luaL_checkinteger(L, 2);

            v[1] = luaL_checkinteger(L, 3);

            v[2] = luaL_checkinteger(L, 4);

            int v_min;

            v_min = luaL_checkinteger(L, 5);

            int v_max;

            v_max = luaL_checkinteger(L, 6);

            bool ret = ImGui_SliderInt3(label, v, v_min, v_max);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, v[0]);

            lua_pushinteger(L, v[1]);

            lua_pushinteger(L, v[2]);

            return 4;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SliderInt3");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int v[3];

            v[0] = luaL_checkinteger(L, 2);

            v[1] = luaL_checkinteger(L, 3);

            v[2] = luaL_checkinteger(L, 4);

            int v_min;

            v_min = luaL_checkinteger(L, 5);

            int v_max;

            v_max = luaL_checkinteger(L, 6);

            const char* format;

            format = luaL_optstring(L, 7, "%d");

            int flags;

            flags = luaL_optinteger(L, 8, 0);

            bool ret = ImGui_SliderInt3Ex(label, v, v_min, v_max, format, flags);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, v[0]);

            lua_pushinteger(L, v[1]);

            lua_pushinteger(L, v[2]);

            return 4;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SliderInt3Ex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int v[4];

            v[0] = luaL_checkinteger(L, 2);

            v[1] = luaL_checkinteger(L, 3);

            v[2] = luaL_checkinteger(L, 4);

            v[3] = luaL_checkinteger(L, 5);

            int v_min;

            v_min = luaL_checkinteger(L, 6);

            int v_max;

            v_max = luaL_checkinteger(L, 7);

            bool ret = ImGui_SliderInt4(label, v, v_min, v_max);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, v[0]);

            lua_pushinteger(L, v[1]);

            lua_pushinteger(L, v[2]);

            lua_pushinteger(L, v[3]);

            return 5;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SliderInt4");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int v[4];

            v[0] = luaL_checkinteger(L, 2);

            v[1] = luaL_checkinteger(L, 3);

            v[2] = luaL_checkinteger(L, 4);

            v[3] = luaL_checkinteger(L, 5);

            int v_min;

            v_min = luaL_checkinteger(L, 6);

            int v_max;

            v_max = luaL_checkinteger(L, 7);

            const char* format;

            format = luaL_optstring(L, 8, "%d");

            int flags;

            flags = luaL_optinteger(L, 9, 0);

            bool ret = ImGui_SliderInt4Ex(label, v, v_min, v_max, format, flags);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, v[0]);

            lua_pushinteger(L, v[1]);

            lua_pushinteger(L, v[2]);

            lua_pushinteger(L, v[3]);

            return 5;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SliderInt4Ex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            ImVec2 size;

            size.x = luaL_checknumber(L, 2);
            size.y = luaL_checknumber(L, 2 + 1);

            float _v;

            _v = luaL_checknumber(L, 4);

            float* v = &_v;

            float v_min;

            v_min = luaL_checknumber(L, 5);

            float v_max;

            v_max = luaL_checknumber(L, 6);

            bool ret = ImGui_VSliderFloat(label, size, v, v_min, v_max);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, _v);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "VSliderFloat");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            ImVec2 size;

            size.x = luaL_checknumber(L, 2);
            size.y = luaL_checknumber(L, 2 + 1);

            float _v;

            _v = luaL_checknumber(L, 4);

            float* v = &_v;

            float v_min;

            v_min = luaL_checknumber(L, 5);

            float v_max;

            v_max = luaL_checknumber(L, 6);

            const char* format;

            format = luaL_optstring(L, 7, "%.3f");

            int flags;

            flags = luaL_optinteger(L, 8, 0);

            bool ret = ImGui_VSliderFloatEx(label, size, v, v_min, v_max, format, flags);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, _v);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "VSliderFloatEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            ImVec2 size;

            size.x = luaL_checknumber(L, 2);
            size.y = luaL_checknumber(L, 2 + 1);

            int _v;

            _v = luaL_checkinteger(L, 4);

            int* v = &_v;

            int v_min;

            v_min = luaL_checkinteger(L, 5);

            int v_max;

            v_max = luaL_checkinteger(L, 6);

            bool ret = ImGui_VSliderInt(label, size, v, v_min, v_max);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, _v);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "VSliderInt");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            ImVec2 size;

            size.x = luaL_checknumber(L, 2);
            size.y = luaL_checknumber(L, 2 + 1);

            int _v;

            _v = luaL_checkinteger(L, 4);

            int* v = &_v;

            int v_min;

            v_min = luaL_checkinteger(L, 5);

            int v_max;

            v_max = luaL_checkinteger(L, 6);

            const char* format;

            format = luaL_optstring(L, 7, "%d");

            int flags;

            flags = luaL_optinteger(L, 8, 0);

            bool ret = ImGui_VSliderIntEx(label, size, v, v_min, v_max, format, flags);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, _v);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "VSliderIntEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float _v;

            _v = luaL_checknumber(L, 2);

            float* v = &_v;

            bool ret = ImGui_InputFloat(label, v);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, _v);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "InputFloat");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float _v;

            _v = luaL_checknumber(L, 2);

            float* v = &_v;

            float step;

            step = luaL_optnumber(L, 3, 0.0f);

            float step_fast;

            step_fast = luaL_optnumber(L, 4, 0.0f);

            const char* format;

            format = luaL_optstring(L, 5, "%.3f");

            int flags;

            flags = luaL_optinteger(L, 6, 0);

            bool ret = ImGui_InputFloatEx(label, v, step, step_fast, format, flags);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, _v);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "InputFloatEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float v[2];

            v[0] = luaL_checknumber(L, 2);

            v[1] = luaL_checknumber(L, 3);

            bool ret = ImGui_InputFloat2(label, v);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, v[0]);

            lua_pushnumber(L, v[1]);

            return 3;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "InputFloat2");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float v[2];

            v[0] = luaL_checknumber(L, 2);

            v[1] = luaL_checknumber(L, 3);

            const char* format;

            format = luaL_optstring(L, 4, "%.3f");

            int flags;

            flags = luaL_optinteger(L, 5, 0);

            bool ret = ImGui_InputFloat2Ex(label, v, format, flags);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, v[0]);

            lua_pushnumber(L, v[1]);

            return 3;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "InputFloat2Ex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float v[3];

            v[0] = luaL_checknumber(L, 2);

            v[1] = luaL_checknumber(L, 3);

            v[2] = luaL_checknumber(L, 4);

            bool ret = ImGui_InputFloat3(label, v);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, v[0]);

            lua_pushnumber(L, v[1]);

            lua_pushnumber(L, v[2]);

            return 4;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "InputFloat3");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float v[3];

            v[0] = luaL_checknumber(L, 2);

            v[1] = luaL_checknumber(L, 3);

            v[2] = luaL_checknumber(L, 4);

            const char* format;

            format = luaL_optstring(L, 5, "%.3f");

            int flags;

            flags = luaL_optinteger(L, 6, 0);

            bool ret = ImGui_InputFloat3Ex(label, v, format, flags);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, v[0]);

            lua_pushnumber(L, v[1]);

            lua_pushnumber(L, v[2]);

            return 4;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "InputFloat3Ex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float v[4];

            v[0] = luaL_checknumber(L, 2);

            v[1] = luaL_checknumber(L, 3);

            v[2] = luaL_checknumber(L, 4);

            v[3] = luaL_checknumber(L, 5);

            bool ret = ImGui_InputFloat4(label, v);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, v[0]);

            lua_pushnumber(L, v[1]);

            lua_pushnumber(L, v[2]);

            lua_pushnumber(L, v[3]);

            return 5;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "InputFloat4");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float v[4];

            v[0] = luaL_checknumber(L, 2);

            v[1] = luaL_checknumber(L, 3);

            v[2] = luaL_checknumber(L, 4);

            v[3] = luaL_checknumber(L, 5);

            const char* format;

            format = luaL_optstring(L, 6, "%.3f");

            int flags;

            flags = luaL_optinteger(L, 7, 0);

            bool ret = ImGui_InputFloat4Ex(label, v, format, flags);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, v[0]);

            lua_pushnumber(L, v[1]);

            lua_pushnumber(L, v[2]);

            lua_pushnumber(L, v[3]);

            return 5;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "InputFloat4Ex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int _v;

            _v = luaL_checkinteger(L, 2);

            int* v = &_v;

            bool ret = ImGui_InputInt(label, v);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, _v);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "InputInt");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int _v;

            _v = luaL_checkinteger(L, 2);

            int* v = &_v;

            int step;

            step = luaL_optinteger(L, 3, 1);

            int step_fast;

            step_fast = luaL_optinteger(L, 4, 100);

            int flags;

            flags = luaL_optinteger(L, 5, 0);

            bool ret = ImGui_InputIntEx(label, v, step, step_fast, flags);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, _v);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "InputIntEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int v[2];

            v[0] = luaL_checkinteger(L, 2);

            v[1] = luaL_checkinteger(L, 3);

            int flags;

            flags = luaL_optinteger(L, 4, 0);

            bool ret = ImGui_InputInt2(label, v, flags);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, v[0]);

            lua_pushinteger(L, v[1]);

            return 3;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "InputInt2");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int v[3];

            v[0] = luaL_checkinteger(L, 2);

            v[1] = luaL_checkinteger(L, 3);

            v[2] = luaL_checkinteger(L, 4);

            int flags;

            flags = luaL_optinteger(L, 5, 0);

            bool ret = ImGui_InputInt3(label, v, flags);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, v[0]);

            lua_pushinteger(L, v[1]);

            lua_pushinteger(L, v[2]);

            return 4;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "InputInt3");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int v[4];

            v[0] = luaL_checkinteger(L, 2);

            v[1] = luaL_checkinteger(L, 3);

            v[2] = luaL_checkinteger(L, 4);

            v[3] = luaL_checkinteger(L, 5);

            int flags;

            flags = luaL_optinteger(L, 6, 0);

            bool ret = ImGui_InputInt4(label, v, flags);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, v[0]);

            lua_pushinteger(L, v[1]);

            lua_pushinteger(L, v[2]);

            lua_pushinteger(L, v[3]);

            return 5;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "InputInt4");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            double _v;

            _v = luaL_checknumber(L, 2);

            double* v = &_v;

            bool ret = ImGui_InputDouble(label, v);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, _v);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "InputDouble");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            double _v;

            _v = luaL_checknumber(L, 2);

            double* v = &_v;

            double step;

            step = luaL_optnumber(L, 3, 0.0);

            double step_fast;

            step_fast = luaL_optnumber(L, 4, 0.0);

            const char* format;

            format = luaL_optstring(L, 5, "%.6f");

            int flags;

            flags = luaL_optinteger(L, 6, 0);

            bool ret = ImGui_InputDoubleEx(label, v, step, step_fast, format, flags);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, _v);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "InputDoubleEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float col[3];

            col[0] = luaL_checknumber(L, 2);

            col[1] = luaL_checknumber(L, 3);

            col[2] = luaL_checknumber(L, 4);

            int flags;

            flags = luaL_optinteger(L, 5, 0);

            bool ret = ImGui_ColorEdit3(label, col, flags);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, col[0]);

            lua_pushnumber(L, col[1]);

            lua_pushnumber(L, col[2]);

            return 4;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ColorEdit3");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float col[4];

            col[0] = luaL_checknumber(L, 2);

            col[1] = luaL_checknumber(L, 3);

            col[2] = luaL_checknumber(L, 4);

            col[3] = luaL_checknumber(L, 5);

            int flags;

            flags = luaL_optinteger(L, 6, 0);

            bool ret = ImGui_ColorEdit4(label, col, flags);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, col[0]);

            lua_pushnumber(L, col[1]);

            lua_pushnumber(L, col[2]);

            lua_pushnumber(L, col[3]);

            return 5;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ColorEdit4");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            float col[3];

            col[0] = luaL_checknumber(L, 2);

            col[1] = luaL_checknumber(L, 3);

            col[2] = luaL_checknumber(L, 4);

            int flags;

            flags = luaL_optinteger(L, 5, 0);

            bool ret = ImGui_ColorPicker3(label, col, flags);

            lua_pushboolean(L, ret);

            lua_pushnumber(L, col[0]);

            lua_pushnumber(L, col[1]);

            lua_pushnumber(L, col[2]);

            return 4;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ColorPicker3");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* desc_id;

            desc_id = luaL_checkstring(L, 1);

            ImVec4 col;

            col.x = luaL_checknumber(L, 2);
            col.y = luaL_checknumber(L, 2 + 1);
            col.z = luaL_checknumber(L, 2 + 2);
            col.w = luaL_checknumber(L, 2 + 3);

            int flags;

            flags = luaL_optinteger(L, 6, 0);

            bool ret = ImGui_ColorButton(desc_id, col, flags);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ColorButton");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* desc_id;

            desc_id = luaL_checkstring(L, 1);

            ImVec4 col;

            col.x = luaL_checknumber(L, 2);
            col.y = luaL_checknumber(L, 2 + 1);
            col.z = luaL_checknumber(L, 2 + 2);
            col.w = luaL_checknumber(L, 2 + 3);

            int flags;

            flags = luaL_optinteger(L, 6, 0);

            ImVec2 size;

            if (lua_isnoneornil(L, 7))
            {
                size = ImVec2{ 0, 0 };
            }
            else
            {
                size.x = luaL_checknumber(L, 7);
                size.y = luaL_checknumber(L, 7 + 1);
            }

            bool ret = ImGui_ColorButtonEx(desc_id, col, flags, size);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ColorButtonEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int flags;

            flags = luaL_checkinteger(L, 1);

            ImGui_SetColorEditOptions(flags);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetColorEditOptions");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            bool ret = ImGui_TreeNode(label);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TreeNode");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* str_id;

            str_id = luaL_checkstring(L, 1);

            const char* fmt;

            fmt = luaL_checkstring(L, 2);

            bool ret = ImGui_TreeNodeStr(str_id, fmt);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TreeNodeStr");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int flags;

            flags = luaL_optinteger(L, 2, 0);

            bool ret = ImGui_TreeNodeEx(label, flags);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TreeNodeEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* str_id;

            str_id = luaL_checkstring(L, 1);

            int flags;

            flags = luaL_checkinteger(L, 2);

            const char* fmt;

            fmt = luaL_checkstring(L, 3);

            bool ret = ImGui_TreeNodeExStr(str_id, flags, fmt);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TreeNodeExStr");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* str_id;

            str_id = luaL_checkstring(L, 1);

            ImGui_TreePush(str_id);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TreePush");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_TreePop();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TreePop");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float ret = ImGui_GetTreeNodeToLabelSpacing();

            lua_pushnumber(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetTreeNodeToLabelSpacing");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int flags;

            flags = luaL_optinteger(L, 2, 0);

            bool ret = ImGui_CollapsingHeader(label, flags);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "CollapsingHeader");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            bool _p_visible;

            _p_visible = lua_toboolean(L, 2) != 0;

            bool* p_visible = &_p_visible;

            int flags;

            flags = luaL_optinteger(L, 3, 0);

            bool ret = ImGui_CollapsingHeaderBoolPtr(label, p_visible, flags);

            lua_pushboolean(L, ret);

            lua_pushboolean(L, _p_visible);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "CollapsingHeaderBoolPtr");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool is_open;

            is_open = lua_toboolean(L, 1) != 0;

            int cond;

            cond = luaL_optinteger(L, 2, 0);

            ImGui_SetNextItemOpen(is_open, cond);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetNextItemOpen");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            bool ret = ImGui_Selectable(label);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "Selectable");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            bool selected;

            selected = lua_isnoneornil(L, 2) ? lua_toboolean(L, 2) : false;

            int flags;

            flags = luaL_optinteger(L, 3, 0);

            ImVec2 size;

            if (lua_isnoneornil(L, 4))
            {
                size = ImVec2{ 0, 0 };
            }
            else
            {
                size.x = luaL_checknumber(L, 4);
                size.y = luaL_checknumber(L, 4 + 1);
            }

            bool ret = ImGui_SelectableEx(label, selected, flags, size);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SelectableEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            bool _p_selected;

            _p_selected = lua_toboolean(L, 2) != 0;

            bool* p_selected = &_p_selected;

            int flags;

            flags = luaL_optinteger(L, 3, 0);

            bool ret = ImGui_SelectableBoolPtr(label, p_selected, flags);

            lua_pushboolean(L, ret);

            lua_pushboolean(L, _p_selected);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SelectableBoolPtr");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            bool _p_selected;

            _p_selected = lua_toboolean(L, 2) != 0;

            bool* p_selected = &_p_selected;

            int flags;

            flags = luaL_optinteger(L, 3, 0);

            ImVec2 size;

            if (lua_isnoneornil(L, 4))
            {
                size = ImVec2{ 0, 0 };
            }
            else
            {
                size.x = luaL_checknumber(L, 4);
                size.y = luaL_checknumber(L, 4 + 1);
            }

            bool ret = ImGui_SelectableBoolPtrEx(label, p_selected, flags, size);

            lua_pushboolean(L, ret);

            lua_pushboolean(L, _p_selected);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SelectableBoolPtrEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            ImVec2 size;

            if (lua_isnoneornil(L, 2))
            {
                size = ImVec2{ 0, 0 };
            }
            else
            {
                size.x = luaL_checknumber(L, 2);
                size.y = luaL_checknumber(L, 2 + 1);
            }

            bool ret = ImGui_BeginListBox(label, size);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginListBox");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_EndListBox();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "EndListBox");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int _current_item;

            _current_item = luaL_checkinteger(L, 2);

            int* current_item = &_current_item;

            if (!lua_isfunction(L, 3))
                luaL_error(L, "argument items_getter must be a function");
            bool (*items_getter)(void* data, int idx, const char** out_text) = +[](void* data, int idx, const char** out_text) {
                lua_State* L = (lua_State*)data;
                lua_pushvalue(L, 3);

                lua_pushinteger(L, idx);

                bool ret = {};
                if (lua_pcall(L, 1, 2, 0) != LUA_OK)
                {
                    lua_getglobal(L, "skr");
                    lua_getfield(L, -1, "log_error");
                    lua_pushvalue(L, -3);
                    lua_call(L, 1, 0);
                    lua_pop(L, 2);
                    return ret;
                }

                ret = lua_toboolean(L, -2) != 0;

                *out_text = luaL_checkstring(L, -1);

                lua_pop(L, 2);
                return ret;
            };
            void* data = L;

            int items_count;

            items_count = luaL_checkinteger(L, 4);

            bool ret = ImGui_ListBoxCallback(label, current_item, items_getter, data, items_count);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, _current_item);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ListBoxCallback");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int _current_item;

            _current_item = luaL_checkinteger(L, 2);

            int* current_item = &_current_item;

            if (!lua_isfunction(L, 3))
                luaL_error(L, "argument items_getter must be a function");
            bool (*items_getter)(void* data, int idx, const char** out_text) = +[](void* data, int idx, const char** out_text) {
                lua_State* L = (lua_State*)data;
                lua_pushvalue(L, 3);

                lua_pushinteger(L, idx);

                bool ret = {};
                if (lua_pcall(L, 1, 2, 0) != LUA_OK)
                {
                    lua_getglobal(L, "skr");
                    lua_getfield(L, -1, "log_error");
                    lua_pushvalue(L, -3);
                    lua_call(L, 1, 0);
                    lua_pop(L, 2);
                    return ret;
                }

                ret = lua_toboolean(L, -2) != 0;

                *out_text = luaL_checkstring(L, -1);

                lua_pop(L, 2);
                return ret;
            };
            void* data = L;

            int items_count;

            items_count = luaL_checkinteger(L, 4);

            int height_in_items;

            height_in_items = luaL_optinteger(L, 5, -1);

            bool ret = ImGui_ListBoxCallbackEx(label, current_item, items_getter, data, items_count, height_in_items);

            lua_pushboolean(L, ret);

            lua_pushinteger(L, _current_item);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ListBoxCallbackEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            if (!lua_isfunction(L, 2))
                luaL_error(L, "argument values_getter must be a function");
            float (*values_getter)(void* data, int idx) = +[](void* data, int idx) {
                lua_State* L = (lua_State*)data;
                lua_pushvalue(L, 2);

                lua_pushinteger(L, idx);

                float ret = {};
                if (lua_pcall(L, 1, 1, 0) != LUA_OK)
                {
                    lua_getglobal(L, "skr");
                    lua_getfield(L, -1, "log_error");
                    lua_pushvalue(L, -3);
                    lua_call(L, 1, 0);
                    lua_pop(L, 2);
                    return ret;
                }

                ret = luaL_checknumber(L, -1);

                lua_pop(L, 1);
                return ret;
            };
            void* data = L;

            int values_count;

            values_count = luaL_checkinteger(L, 3);

            ImGui_PlotLinesCallback(label, values_getter, data, values_count);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PlotLinesCallback");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            if (!lua_isfunction(L, 2))
                luaL_error(L, "argument values_getter must be a function");
            float (*values_getter)(void* data, int idx) = +[](void* data, int idx) {
                lua_State* L = (lua_State*)data;
                lua_pushvalue(L, 2);

                lua_pushinteger(L, idx);

                float ret = {};
                if (lua_pcall(L, 1, 1, 0) != LUA_OK)
                {
                    lua_getglobal(L, "skr");
                    lua_getfield(L, -1, "log_error");
                    lua_pushvalue(L, -3);
                    lua_call(L, 1, 0);
                    lua_pop(L, 2);
                    return ret;
                }

                ret = luaL_checknumber(L, -1);

                lua_pop(L, 1);
                return ret;
            };
            void* data = L;

            int values_count;

            values_count = luaL_checkinteger(L, 3);

            int values_offset;

            values_offset = luaL_optinteger(L, 4, 0);

            const char* overlay_text;

            overlay_text = luaL_optstring(L, 5, NULL);

            float scale_min;

            scale_min = luaL_optnumber(L, 6, FLT_MAX);

            float scale_max;

            scale_max = luaL_optnumber(L, 7, FLT_MAX);

            ImVec2 graph_size;

            if (lua_isnoneornil(L, 8))
            {
                graph_size = ImVec2{ 0, 0 };
            }
            else
            {
                graph_size.x = luaL_checknumber(L, 8);
                graph_size.y = luaL_checknumber(L, 8 + 1);
            }

            ImGui_PlotLinesCallbackEx(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PlotLinesCallbackEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            if (!lua_isfunction(L, 2))
                luaL_error(L, "argument values_getter must be a function");
            float (*values_getter)(void* data, int idx) = +[](void* data, int idx) {
                lua_State* L = (lua_State*)data;
                lua_pushvalue(L, 2);

                lua_pushinteger(L, idx);

                float ret = {};
                if (lua_pcall(L, 1, 1, 0) != LUA_OK)
                {
                    lua_getglobal(L, "skr");
                    lua_getfield(L, -1, "log_error");
                    lua_pushvalue(L, -3);
                    lua_call(L, 1, 0);
                    lua_pop(L, 2);
                    return ret;
                }

                ret = luaL_checknumber(L, -1);

                lua_pop(L, 1);
                return ret;
            };
            void* data = L;

            int values_count;

            values_count = luaL_checkinteger(L, 3);

            ImGui_PlotHistogramCallback(label, values_getter, data, values_count);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PlotHistogramCallback");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            if (!lua_isfunction(L, 2))
                luaL_error(L, "argument values_getter must be a function");
            float (*values_getter)(void* data, int idx) = +[](void* data, int idx) {
                lua_State* L = (lua_State*)data;
                lua_pushvalue(L, 2);

                lua_pushinteger(L, idx);

                float ret = {};
                if (lua_pcall(L, 1, 1, 0) != LUA_OK)
                {
                    lua_getglobal(L, "skr");
                    lua_getfield(L, -1, "log_error");
                    lua_pushvalue(L, -3);
                    lua_call(L, 1, 0);
                    lua_pop(L, 2);
                    return ret;
                }

                ret = luaL_checknumber(L, -1);

                lua_pop(L, 1);
                return ret;
            };
            void* data = L;

            int values_count;

            values_count = luaL_checkinteger(L, 3);

            int values_offset;

            values_offset = luaL_optinteger(L, 4, 0);

            const char* overlay_text;

            overlay_text = luaL_optstring(L, 5, NULL);

            float scale_min;

            scale_min = luaL_optnumber(L, 6, FLT_MAX);

            float scale_max;

            scale_max = luaL_optnumber(L, 7, FLT_MAX);

            ImVec2 graph_size;

            if (lua_isnoneornil(L, 8))
            {
                graph_size = ImVec2{ 0, 0 };
            }
            else
            {
                graph_size.x = luaL_checknumber(L, 8);
                graph_size.y = luaL_checknumber(L, 8 + 1);
            }

            ImGui_PlotHistogramCallbackEx(label, values_getter, data, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PlotHistogramCallbackEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_BeginMenuBar();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginMenuBar");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_EndMenuBar();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "EndMenuBar");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_BeginMainMenuBar();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginMainMenuBar");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_EndMainMenuBar();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "EndMainMenuBar");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            bool ret = ImGui_BeginMenu(label);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginMenu");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            bool enabled;

            enabled = lua_isnoneornil(L, 2) ? lua_toboolean(L, 2) : true;

            bool ret = ImGui_BeginMenuEx(label, enabled);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginMenuEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_EndMenu();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "EndMenu");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            bool ret = ImGui_MenuItem(label);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "MenuItem");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            const char* shortcut;

            shortcut = luaL_optstring(L, 2, NULL);

            bool selected;

            selected = lua_isnoneornil(L, 3) ? lua_toboolean(L, 3) : false;

            bool enabled;

            enabled = lua_isnoneornil(L, 4) ? lua_toboolean(L, 4) : true;

            bool ret = ImGui_MenuItemEx(label, shortcut, selected, enabled);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "MenuItemEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            const char* shortcut;

            shortcut = luaL_checkstring(L, 2);

            bool _p_selected;

            _p_selected = lua_toboolean(L, 3) != 0;

            bool* p_selected = &_p_selected;

            bool enabled;

            enabled = lua_isnoneornil(L, 4) ? lua_toboolean(L, 4) : true;

            bool ret = ImGui_MenuItemBoolPtr(label, shortcut, p_selected, enabled);

            lua_pushboolean(L, ret);

            lua_pushboolean(L, _p_selected);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "MenuItemBoolPtr");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_BeginTooltip();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginTooltip");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_EndTooltip();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "EndTooltip");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* fmt;

            fmt = luaL_checkstring(L, 1);

            ImGui_SetTooltip(fmt);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetTooltip");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* str_id;

            str_id = luaL_checkstring(L, 1);

            int flags;

            flags = luaL_optinteger(L, 2, 0);

            bool ret = ImGui_BeginPopup(str_id, flags);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginPopup");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* name;

            name = luaL_checkstring(L, 1);

            bool _p_open;

            _p_open = lua_toboolean(L, 2) != 0;

            bool* p_open = &_p_open;

            int flags;

            flags = luaL_optinteger(L, 3, 0);

            bool ret = ImGui_BeginPopupModal(name, p_open, flags);

            lua_pushboolean(L, ret);

            lua_pushboolean(L, _p_open);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginPopupModal");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_EndPopup();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "EndPopup");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* str_id;

            str_id = luaL_checkstring(L, 1);

            int popup_flags;

            popup_flags = luaL_optinteger(L, 2, 0);

            ImGui_OpenPopup(str_id, popup_flags);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "OpenPopup");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* str_id;

            str_id = luaL_optstring(L, 1, NULL);

            int popup_flags;

            popup_flags = luaL_optinteger(L, 2, 1);

            ImGui_OpenPopupOnItemClick(str_id, popup_flags);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "OpenPopupOnItemClick");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_CloseCurrentPopup();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "CloseCurrentPopup");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_BeginPopupContextItem();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginPopupContextItem");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* str_id;

            str_id = luaL_optstring(L, 1, NULL);

            int popup_flags;

            popup_flags = luaL_optinteger(L, 2, 1);

            bool ret = ImGui_BeginPopupContextItemEx(str_id, popup_flags);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginPopupContextItemEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_BeginPopupContextWindow();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginPopupContextWindow");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* str_id;

            str_id = luaL_optstring(L, 1, NULL);

            int popup_flags;

            popup_flags = luaL_optinteger(L, 2, 1);

            bool ret = ImGui_BeginPopupContextWindowEx(str_id, popup_flags);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginPopupContextWindowEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_BeginPopupContextVoid();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginPopupContextVoid");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* str_id;

            str_id = luaL_optstring(L, 1, NULL);

            int popup_flags;

            popup_flags = luaL_optinteger(L, 2, 1);

            bool ret = ImGui_BeginPopupContextVoidEx(str_id, popup_flags);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginPopupContextVoidEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* str_id;

            str_id = luaL_checkstring(L, 1);

            int flags;

            flags = luaL_optinteger(L, 2, 0);

            bool ret = ImGui_IsPopupOpen(str_id, flags);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsPopupOpen");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* str_id;

            str_id = luaL_checkstring(L, 1);

            int column;

            column = luaL_checkinteger(L, 2);

            int flags;

            flags = luaL_optinteger(L, 3, 0);

            bool ret = ImGui_BeginTable(str_id, column, flags);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginTable");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* str_id;

            str_id = luaL_checkstring(L, 1);

            int column;

            column = luaL_checkinteger(L, 2);

            int flags;

            flags = luaL_optinteger(L, 3, 0);

            ImVec2 outer_size;

            if (lua_isnoneornil(L, 4))
            {
                outer_size = ImVec2{ 0.0f, 0.0f };
            }
            else
            {
                outer_size.x = luaL_checknumber(L, 4);
                outer_size.y = luaL_checknumber(L, 4 + 1);
            }

            float inner_width;

            inner_width = luaL_optnumber(L, 6, 0.0f);

            bool ret = ImGui_BeginTableEx(str_id, column, flags, outer_size, inner_width);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginTableEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_EndTable();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "EndTable");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_TableNextRow();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TableNextRow");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int row_flags;

            row_flags = luaL_optinteger(L, 1, 0);

            float min_row_height;

            min_row_height = luaL_optnumber(L, 2, 0.0f);

            ImGui_TableNextRowEx(row_flags, min_row_height);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TableNextRowEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_TableNextColumn();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TableNextColumn");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int column_n;

            column_n = luaL_checkinteger(L, 1);

            bool ret = ImGui_TableSetColumnIndex(column_n);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TableSetColumnIndex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int flags;

            flags = luaL_optinteger(L, 2, 0);

            ImGui_TableSetupColumn(label, flags);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TableSetupColumn");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int cols;

            cols = luaL_checkinteger(L, 1);

            int rows;

            rows = luaL_checkinteger(L, 2);

            ImGui_TableSetupScrollFreeze(cols, rows);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TableSetupScrollFreeze");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_TableHeadersRow();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TableHeadersRow");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            ImGui_TableHeader(label);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TableHeader");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int ret = ImGui_TableGetColumnCount();

            lua_pushinteger(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TableGetColumnCount");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int ret = ImGui_TableGetColumnIndex();

            lua_pushinteger(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TableGetColumnIndex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int ret = ImGui_TableGetRowIndex();

            lua_pushinteger(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TableGetRowIndex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int column_n;

            column_n = luaL_optinteger(L, 1, -1);

            const char* ret = ImGui_TableGetColumnName(column_n);

            lua_pushstring(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TableGetColumnName");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int column_n;

            column_n = luaL_optinteger(L, 1, -1);

            int ret = ImGui_TableGetColumnFlags(column_n);

            lua_pushinteger(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TableGetColumnFlags");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int column_n;

            column_n = luaL_checkinteger(L, 1);

            bool v;

            v = lua_toboolean(L, 2) != 0;

            ImGui_TableSetColumnEnabled(column_n, v);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TableSetColumnEnabled");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_Columns();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "Columns");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int count;

            count = luaL_optinteger(L, 1, 1);

            const char* id;

            id = luaL_optstring(L, 2, NULL);

            bool border;

            border = lua_isnoneornil(L, 3) ? lua_toboolean(L, 3) : true;

            ImGui_ColumnsEx(count, id, border);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ColumnsEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_NextColumn();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "NextColumn");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int ret = ImGui_GetColumnIndex();

            lua_pushinteger(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetColumnIndex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int column_index;

            column_index = luaL_optinteger(L, 1, -1);

            float ret = ImGui_GetColumnWidth(column_index);

            lua_pushnumber(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetColumnWidth");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int column_index;

            column_index = luaL_checkinteger(L, 1);

            float width;

            width = luaL_checknumber(L, 2);

            ImGui_SetColumnWidth(column_index, width);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetColumnWidth");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int column_index;

            column_index = luaL_optinteger(L, 1, -1);

            float ret = ImGui_GetColumnOffset(column_index);

            lua_pushnumber(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetColumnOffset");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int column_index;

            column_index = luaL_checkinteger(L, 1);

            float offset_x;

            offset_x = luaL_checknumber(L, 2);

            ImGui_SetColumnOffset(column_index, offset_x);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetColumnOffset");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int ret = ImGui_GetColumnsCount();

            lua_pushinteger(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetColumnsCount");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* str_id;

            str_id = luaL_checkstring(L, 1);

            int flags;

            flags = luaL_optinteger(L, 2, 0);

            bool ret = ImGui_BeginTabBar(str_id, flags);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginTabBar");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_EndTabBar();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "EndTabBar");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            bool _p_open;

            _p_open = lua_toboolean(L, 2) != 0;

            bool* p_open = &_p_open;

            int flags;

            flags = luaL_optinteger(L, 3, 0);

            bool ret = ImGui_BeginTabItem(label, p_open, flags);

            lua_pushboolean(L, ret);

            lua_pushboolean(L, _p_open);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginTabItem");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_EndTabItem();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "EndTabItem");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int flags;

            flags = luaL_optinteger(L, 2, 0);

            bool ret = ImGui_TabItemButton(label, flags);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "TabItemButton");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* tab_or_docked_window_label;

            tab_or_docked_window_label = luaL_checkstring(L, 1);

            ImGui_SetTabItemClosed(tab_or_docked_window_label);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetTabItemClosed");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_IsWindowDocked();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsWindowDocked");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int auto_open_depth;

            auto_open_depth = luaL_optinteger(L, 1, -1);

            ImGui_LogToTTY(auto_open_depth);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "LogToTTY");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int auto_open_depth;

            auto_open_depth = luaL_optinteger(L, 1, -1);

            const char* filename;

            filename = luaL_optstring(L, 2, NULL);

            ImGui_LogToFile(auto_open_depth, filename);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "LogToFile");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int auto_open_depth;

            auto_open_depth = luaL_optinteger(L, 1, -1);

            ImGui_LogToClipboard(auto_open_depth);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "LogToClipboard");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_LogFinish();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "LogFinish");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_LogButtons();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "LogButtons");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* fmt;

            fmt = luaL_checkstring(L, 1);

            ImGui_LogText(fmt);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "LogText");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int flags;

            flags = luaL_optinteger(L, 1, 0);

            bool ret = ImGui_BeginDragDropSource(flags);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginDragDropSource");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_EndDragDropSource();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "EndDragDropSource");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_BeginDragDropTarget();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginDragDropTarget");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_EndDragDropTarget();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "EndDragDropTarget");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool disabled;

            disabled = lua_isnoneornil(L, 1) ? lua_toboolean(L, 1) : true;

            ImGui_BeginDisabled(disabled);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "BeginDisabled");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_EndDisabled();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "EndDisabled");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 clip_rect_min;

            clip_rect_min.x = luaL_checknumber(L, 1);
            clip_rect_min.y = luaL_checknumber(L, 1 + 1);

            ImVec2 clip_rect_max;

            clip_rect_max.x = luaL_checknumber(L, 3);
            clip_rect_max.y = luaL_checknumber(L, 3 + 1);

            bool intersect_with_current_clip_rect;

            intersect_with_current_clip_rect = lua_toboolean(L, 5) != 0;

            ImGui_PushClipRect(clip_rect_min, clip_rect_max, intersect_with_current_clip_rect);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PushClipRect");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_PopClipRect();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "PopClipRect");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_SetItemDefaultFocus();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetItemDefaultFocus");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_SetKeyboardFocusHere();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetKeyboardFocusHere");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int offset;

            offset = luaL_optinteger(L, 1, 0);

            ImGui_SetKeyboardFocusHereEx(offset);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetKeyboardFocusHereEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int flags;

            flags = luaL_optinteger(L, 1, 0);

            bool ret = ImGui_IsItemHovered(flags);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsItemHovered");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_IsItemActive();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsItemActive");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_IsItemFocused();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsItemFocused");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_IsItemClicked();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsItemClicked");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int mouse_button;

            mouse_button = luaL_optinteger(L, 1, 0);

            bool ret = ImGui_IsItemClickedEx(mouse_button);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsItemClickedEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_IsItemVisible();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsItemVisible");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_IsItemEdited();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsItemEdited");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_IsItemActivated();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsItemActivated");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_IsItemDeactivated();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsItemDeactivated");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_IsItemDeactivatedAfterEdit();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsItemDeactivatedAfterEdit");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_IsItemToggledOpen();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsItemToggledOpen");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_IsAnyItemHovered();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsAnyItemHovered");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_IsAnyItemActive();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsAnyItemActive");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_IsAnyItemFocused();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsAnyItemFocused");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 ret = ImGui_GetItemRectMin();

            lua_pushnumber(L, ret.x);
            lua_pushnumber(L, ret.y);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetItemRectMin");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 ret = ImGui_GetItemRectMax();

            lua_pushnumber(L, ret.x);
            lua_pushnumber(L, ret.y);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetItemRectMax");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 ret = ImGui_GetItemRectSize();

            lua_pushnumber(L, ret.x);
            lua_pushnumber(L, ret.y);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetItemRectSize");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_SetItemAllowOverlap();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetItemAllowOverlap");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 size;

            size.x = luaL_checknumber(L, 1);
            size.y = luaL_checknumber(L, 1 + 1);

            bool ret = ImGui_IsRectVisibleBySize(size);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsRectVisibleBySize");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 rect_min;

            rect_min.x = luaL_checknumber(L, 1);
            rect_min.y = luaL_checknumber(L, 1 + 1);

            ImVec2 rect_max;

            rect_max.x = luaL_checknumber(L, 3);
            rect_max.y = luaL_checknumber(L, 3 + 1);

            bool ret = ImGui_IsRectVisible(rect_min, rect_max);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsRectVisible");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            double ret = ImGui_GetTime();

            lua_pushnumber(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetTime");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int ret = ImGui_GetFrameCount();

            lua_pushinteger(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetFrameCount");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int idx;

            idx = luaL_checkinteger(L, 1);

            const char* ret = ImGui_GetStyleColorName(idx);

            lua_pushstring(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetStyleColorName");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_EndChildFrame();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "EndChildFrame");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* text;

            text = luaL_checkstring(L, 1);

            ImVec2 ret = ImGui_CalcTextSize(text);

            lua_pushnumber(L, ret.x);
            lua_pushnumber(L, ret.y);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "CalcTextSize");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* text;

            text = luaL_checkstring(L, 1);

            const char* text_end;

            text_end = luaL_optstring(L, 2, NULL);

            bool hide_text_after_double_hash;

            hide_text_after_double_hash = lua_isnoneornil(L, 3) ? lua_toboolean(L, 3) : false;

            float wrap_width;

            wrap_width = luaL_optnumber(L, 4, -1.0f);

            ImVec2 ret = ImGui_CalcTextSizeEx(text, text_end, hide_text_after_double_hash, wrap_width);

            lua_pushnumber(L, ret.x);
            lua_pushnumber(L, ret.y);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "CalcTextSizeEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float r;

            r = luaL_checknumber(L, 1);

            float g;

            g = luaL_checknumber(L, 2);

            float b;

            b = luaL_checknumber(L, 3);

            float _out_h;

            _out_h = luaL_checknumber(L, 4);

            float* out_h = &_out_h;

            float _out_s;

            _out_s = luaL_checknumber(L, 5);

            float* out_s = &_out_s;

            float _out_v;

            _out_v = luaL_checknumber(L, 6);

            float* out_v = &_out_v;

            ImGui_ColorConvertRGBtoHSV(r, g, b, out_h, out_s, out_v);

            lua_pushnumber(L, _out_h);

            lua_pushnumber(L, _out_s);

            lua_pushnumber(L, _out_v);

            return 3;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ColorConvertRGBtoHSV");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float h;

            h = luaL_checknumber(L, 1);

            float s;

            s = luaL_checknumber(L, 2);

            float v;

            v = luaL_checknumber(L, 3);

            float _out_r;

            _out_r = luaL_checknumber(L, 4);

            float* out_r = &_out_r;

            float _out_g;

            _out_g = luaL_checknumber(L, 5);

            float* out_g = &_out_g;

            float _out_b;

            _out_b = luaL_checknumber(L, 6);

            float* out_b = &_out_b;

            ImGui_ColorConvertHSVtoRGB(h, s, v, out_r, out_g, out_b);

            lua_pushnumber(L, _out_r);

            lua_pushnumber(L, _out_g);

            lua_pushnumber(L, _out_b);

            return 3;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ColorConvertHSVtoRGB");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int key;

            key = luaL_checkinteger(L, 1);

            bool ret = ImGui_IsKeyDown(key);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsKeyDown");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int key;

            key = luaL_checkinteger(L, 1);

            bool ret = ImGui_IsKeyPressed(key);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsKeyPressed");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int key;

            key = luaL_checkinteger(L, 1);

            bool repeat;

            repeat = lua_isnoneornil(L, 2) ? lua_toboolean(L, 2) : true;

            bool ret = ImGui_IsKeyPressedEx(key, repeat);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsKeyPressedEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int key;

            key = luaL_checkinteger(L, 1);

            bool ret = ImGui_IsKeyReleased(key);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsKeyReleased");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int key;

            key = luaL_checkinteger(L, 1);

            float repeat_delay;

            repeat_delay = luaL_checknumber(L, 2);

            float rate;

            rate = luaL_checknumber(L, 3);

            int ret = ImGui_GetKeyPressedAmount(key, repeat_delay, rate);

            lua_pushinteger(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetKeyPressedAmount");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int key;

            key = luaL_checkinteger(L, 1);

            const char* ret = ImGui_GetKeyName(key);

            lua_pushstring(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetKeyName");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool want_capture_keyboard;

            want_capture_keyboard = lua_toboolean(L, 1) != 0;

            ImGui_SetNextFrameWantCaptureKeyboard(want_capture_keyboard);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetNextFrameWantCaptureKeyboard");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int button;

            button = luaL_checkinteger(L, 1);

            bool ret = ImGui_IsMouseDown(button);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsMouseDown");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int button;

            button = luaL_checkinteger(L, 1);

            bool ret = ImGui_IsMouseClicked(button);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsMouseClicked");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int button;

            button = luaL_checkinteger(L, 1);

            bool repeat;

            repeat = lua_isnoneornil(L, 2) ? lua_toboolean(L, 2) : false;

            bool ret = ImGui_IsMouseClickedEx(button, repeat);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsMouseClickedEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int button;

            button = luaL_checkinteger(L, 1);

            bool ret = ImGui_IsMouseReleased(button);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsMouseReleased");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int button;

            button = luaL_checkinteger(L, 1);

            bool ret = ImGui_IsMouseDoubleClicked(button);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsMouseDoubleClicked");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int button;

            button = luaL_checkinteger(L, 1);

            int ret = ImGui_GetMouseClickedCount(button);

            lua_pushinteger(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetMouseClickedCount");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 r_min;

            r_min.x = luaL_checknumber(L, 1);
            r_min.y = luaL_checknumber(L, 1 + 1);

            ImVec2 r_max;

            r_max.x = luaL_checknumber(L, 3);
            r_max.y = luaL_checknumber(L, 3 + 1);

            bool ret = ImGui_IsMouseHoveringRect(r_min, r_max);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsMouseHoveringRect");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 r_min;

            r_min.x = luaL_checknumber(L, 1);
            r_min.y = luaL_checknumber(L, 1 + 1);

            ImVec2 r_max;

            r_max.x = luaL_checknumber(L, 3);
            r_max.y = luaL_checknumber(L, 3 + 1);

            bool clip;

            clip = lua_isnoneornil(L, 5) ? lua_toboolean(L, 5) : true;

            bool ret = ImGui_IsMouseHoveringRectEx(r_min, r_max, clip);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsMouseHoveringRectEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool ret = ImGui_IsAnyMouseDown();

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsAnyMouseDown");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 ret = ImGui_GetMousePos();

            lua_pushnumber(L, ret.x);
            lua_pushnumber(L, ret.y);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetMousePos");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImVec2 ret = ImGui_GetMousePosOnOpeningCurrentPopup();

            lua_pushnumber(L, ret.x);
            lua_pushnumber(L, ret.y);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetMousePosOnOpeningCurrentPopup");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int button;

            button = luaL_checkinteger(L, 1);

            float lock_threshold;

            lock_threshold = luaL_optnumber(L, 2, -1.0f);

            bool ret = ImGui_IsMouseDragging(button, lock_threshold);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "IsMouseDragging");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int button;

            button = luaL_optinteger(L, 1, 0);

            float lock_threshold;

            lock_threshold = luaL_optnumber(L, 2, -1.0f);

            ImVec2 ret = ImGui_GetMouseDragDelta(button, lock_threshold);

            lua_pushnumber(L, ret.x);
            lua_pushnumber(L, ret.y);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetMouseDragDelta");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_ResetMouseDragDelta();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ResetMouseDragDelta");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int button;

            button = luaL_optinteger(L, 1, 0);

            ImGui_ResetMouseDragDeltaEx(button);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ResetMouseDragDeltaEx");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int ret = ImGui_GetMouseCursor();

            lua_pushinteger(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetMouseCursor");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int cursor_type;

            cursor_type = luaL_checkinteger(L, 1);

            ImGui_SetMouseCursor(cursor_type);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetMouseCursor");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool want_capture_mouse;

            want_capture_mouse = lua_toboolean(L, 1) != 0;

            ImGui_SetNextFrameWantCaptureMouse(want_capture_mouse);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetNextFrameWantCaptureMouse");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* ret = ImGui_GetClipboardText();

            lua_pushstring(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetClipboardText");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* text;

            text = luaL_checkstring(L, 1);

            ImGui_SetClipboardText(text);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SetClipboardText");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* ini_filename;

            ini_filename = luaL_checkstring(L, 1);

            ImGui_LoadIniSettingsFromDisk(ini_filename);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "LoadIniSettingsFromDisk");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* ini_filename;

            ini_filename = luaL_checkstring(L, 1);

            ImGui_SaveIniSettingsToDisk(ini_filename);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "SaveIniSettingsToDisk");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* text;

            text = luaL_checkstring(L, 1);

            ImGui_DebugTextEncoding(text);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "DebugTextEncoding");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_UpdatePlatformWindows();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "UpdatePlatformWindows");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_RenderPlatformWindowsDefault();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "RenderPlatformWindowsDefault");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_DestroyPlatformWindows();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "DestroyPlatformWindows");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int key;

            key = luaL_checkinteger(L, 1);

            int ret = GetKeyIndex(key);

            lua_pushinteger(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetKeyIndex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int key;

            key = luaL_checkinteger(L, 1);

            int ret = GetKeyIndex(key);

            lua_pushinteger(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetKeyIndex");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool want_capture_keyboard;

            want_capture_keyboard = lua_isnoneornil(L, 1) ? lua_toboolean(L, 1) : true;

            ImGui_CaptureKeyboardFromApp(want_capture_keyboard);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "CaptureKeyboardFromApp");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            bool want_capture_mouse;

            want_capture_mouse = lua_isnoneornil(L, 1) ? lua_toboolean(L, 1) : true;

            ImGui_CaptureMouseFromApp(want_capture_mouse);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "CaptureMouseFromApp");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            int items_count;

            items_count = luaL_checkinteger(L, 1);

            float items_height;

            items_height = luaL_checknumber(L, 2);

            int _out_items_display_start;

            _out_items_display_start = luaL_checkinteger(L, 3);

            int* out_items_display_start = &_out_items_display_start;

            int _out_items_display_end;

            _out_items_display_end = luaL_checkinteger(L, 4);

            int* out_items_display_end = &_out_items_display_end;

            ImGui_CalcListClipping(items_count, items_height, out_items_display_start, out_items_display_end);

            lua_pushinteger(L, _out_items_display_start);

            lua_pushinteger(L, _out_items_display_end);

            return 2;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "CalcListClipping");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            float ret = ImGui_GetWindowContentRegionWidth();

            lua_pushnumber(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "GetWindowContentRegionWidth");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            int items_count;

            items_count = luaL_checkinteger(L, 2);

            int height_in_items;

            height_in_items = luaL_optinteger(L, 3, -1);

            bool ret = ImGui_ListBoxHeaderInt(label, items_count, height_in_items);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ListBoxHeaderInt");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* label;

            label = luaL_checkstring(L, 1);

            ImVec2 size;

            if (lua_isnoneornil(L, 2))
            {
                size = ImVec2{ 0, 0 };
            }
            else
            {
                size.x = luaL_checknumber(L, 2);
                size.y = luaL_checknumber(L, 2 + 1);
            }

            bool ret = ImGui_ListBoxHeader(label, size);

            lua_pushboolean(L, ret);

            return 1;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ListBoxHeader");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            ImGui_ListBoxFooter();
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "ListBoxFooter");
    }
    {
        auto trampoline = +[](lua_State* L) -> int {
            const char* str_id;

            str_id = luaL_optstring(L, 1, NULL);

            int mb;

            mb = luaL_optinteger(L, 2, 1);

            ImGui_OpenPopupContextItem(str_id, mb);
            return 0;
        };
        lua_pushcfunction(L, trampoline, "IMGUI");
        lua_setfield(L, -2, "OpenPopupContextItem");
    }
    lua_setfield(L, -2, "imgui");
}